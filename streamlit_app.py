import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
import io
import base64
from PIL import Image
from datetime import datetime, timedelta

# Configura√ß√£o inicial
st.set_page_config(
    layout="wide",
    page_title="√Åguas Guariroba - Visualizador de Precipita√ß√£o - MS",
    page_icon="üåßÔ∏è"
)

# Fun√ß√µes auxiliares para estiliza√ß√£o
def create_gradient_background():
    # C√≥digo CSS para gradiente de fundo
    st.markdown(
        """
        <style>
        .stApp {
            background: linear-gradient(to bottom, #1e3c72, #2a5298);
            color: white;
        }
        .stSidebar {
            background-color: rgba(30, 60, 114, 0.8);
        }
        .css-1adrfps {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .st-bw {
            color: white;
        }
        .st-cx {
            background-color: rgba(255, 255, 255, 0.1);
        }
        header {
            background-color: transparent !important;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

def add_logo():
    # Adicionar logo (placeholder)
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("https://via.placeholder.com/400x100?text=√Åguas+Guariroba", use_column_width=True)

# Criando a interface
def main():
    # Aplicando estiliza√ß√£o
    create_gradient_background()
    
    # Cabe√ßalho
    add_logo()
    st.title("üìä Visualizador de Precipita√ß√£o - Campo Grande, MS")
    st.markdown("### Sistema de Monitoramento e Previs√£o de Chuvas")
    
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Abas para organizar as configura√ß√µes
        config_tab1, config_tab2, config_tab3 = st.tabs(["üìç Local", "üìÖ Per√≠odo", "üîß Avan√ßado"])
        
        with config_tab1:
            # Sele√ß√£o de regi√£o
            area = st.selectbox(
                "Selecione a regi√£o",
                list(CAMPOS_GRANDE_AREAS.keys()),
                index=0
            )
            lat_center, lon_center = CAMPOS_GRANDE_AREAS.get(area, (-20.4697, -54.6201))
            
            # Visualiza√ß√£o do mapa
            map_width = st.slider("√Årea de Visualiza√ß√£o (graus)", 0.1, 2.0, 0.3, 0.1)
            show_shapefile = st.checkbox("Mostrar √Årea Urbana", value=True)
            satellite_background = st.checkbox("Usar Imagem de Sat√©lite", value=True)
        
        with config_tab2:
            # Per√≠odo de an√°lise
            st.subheader("Per√≠odo de An√°lise")
            today = datetime.today()
            col1, col2 = st.columns(2)
            with col1:
                start_date = st.date_input("In√≠cio", today - timedelta(days=7))
            with col2:
                end_date = st.date_input("Fim", today + timedelta(days=5))
            
            # Hor√°rios
            st.subheader("Hor√°rios")
            all_hours = [f"{h:02d}:00" for h in range(0, 24, 3)]
            col1, col2 = st.columns(2)
            with col1:
                start_hour = st.selectbox("Hora Inicial", all_hours)
            with col2:
                end_hour = st.selectbox("Hora Final", all_hours, index=len(all_hours)-1)

            # Vari√°vel de precipita√ß√£o
            precip_var = st.selectbox(
                "Vari√°vel de Precipita√ß√£o", 
                list(PRECIPITATION_VARIABLES.keys()),
                format_func=lambda x: PRECIPITATION_VARIABLES[x]
            )
            
            # Horizonte de previs√£o
            forecast_days = st.slider("Horizonte de Previs√£o (dias)", 1, 14, 7)
            
        with config_tab3:
            # Configura√ß√µes avan√ßadas
            st.subheader("Configura√ß√µes Avan√ßadas")
            
            animation_speed = st.slider("Velocidade Anima√ß√£o (ms)", 200, 1000, 500)
            colormap = st.selectbox("Paleta de Cores", COLORMAPS)
            
            product_type = st.radio("Tipo de Produto", ["reanalysis", "ensemble_mean"])
            ml_model = st.selectbox("Modelo de Previs√£o", 
                                  ["RandomForest", "GradientBoosting", "LinearRegression"])
            
            probability_threshold = st.slider("Limiar de Probabilidade (%)", 0, 100, 30)
    
    # Bot√£o para atualizar dados
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        update_button = st.button("üîÑ Atualizar Dados", use_container_width=True)

    # Organizar a exibi√ß√£o dos dados em abas
    tab1, tab2, tab3, tab4 = st.tabs(["üìà S√©rie Temporal", "üó∫Ô∏è Mapas", "üîÆ Previs√µes", "üìä An√°lise Regional"])
    
    # Simular dados para demonstra√ß√£o
    if 'data' not in st.session_state or update_button:
        with st.spinner("‚åõ Carregando dados..."):
            # Normalmente aqui chamar√≠amos a fun√ß√£o download_era5_data e process_precipitation_data
            # Para demonstra√ß√£o, vamos gerar dados simulados
            st.session_state.data = {
                'timeseries': simulate_timeseries_data(start_date, end_date),
                'daily': simulate_daily_data(start_date, end_date),
                'forecast': simulate_forecast_data(end_date, forecast_days),
                'ml_forecast': simulate_ml_forecast(list(CAMPOS_GRANDE_AREAS.keys()), end_date, forecast_days),
                'all_regions': {region: simulate_timeseries_data(start_date, end_date) 
                              for region in CAMPOS_GRANDE_AREAS.keys()}
            }
    
    # Tab 1: S√©rie Temporal
    with tab1:
        st.header(f"S√©rie Temporal de Precipita√ß√£o - {area}")
        
        data = st.session_state.data
        
        # Gr√°fico de s√©rie temporal
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.bar(data['timeseries']['time'], data['timeseries']['precipitation'],
               width=0.02, alpha=0.7, color='#1e88e5', label='Precipita√ß√£o a cada 3h')
        
        # Formatar eixos
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %H:%M'))
        plt.xticks(rotation=45)
        ax.set_ylabel('Precipita√ß√£o (mm)', fontsize=12)
        ax.set_title(f'Precipita√ß√£o em {area} - {start_date.strftime("%d/%m/%Y")} a {end_date.strftime("%d/%m/%Y")}', 
                    fontsize=14)
        ax.grid(True, alpha=0.3)
        plt.tight_layout()
        
        st.pyplot(fig)
        
        # Estat√≠sticas di√°rias
        st.subheader("Estat√≠sticas Di√°rias")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Precipita√ß√£o Total", f"{data['daily']['precipitation'].sum():.1f} mm")
        with col2:
            st.metric("Precipita√ß√£o M√©dia Di√°ria", f"{data['daily']['precipitation'].mean():.1f} mm/dia")
        with col3:
            st.metric("Dias com Chuva", f"{(data['daily']['precipitation'] > 0.1).sum()} dias")
        
        # Tabela de dados di√°rios
        st.subheader("Dados Di√°rios")
        display_df = data['daily'].copy()
        display_df['date'] = display_df['date'].dt.strftime('%d/%m/%Y')
        display_df.columns = ['Data', 'Precipita√ß√£o (mm)']
        st.dataframe(display_df, use_container_width=True)
    
    # Tab 2: Mapas
    with tab2:
        st.header("Visualiza√ß√£o Espacial da Precipita√ß√£o")
        
        # Seletor de tempo para o mapa
        timestamps = data['timeseries']['time'].tolist()
        selected_time = st.select_slider(
            "Selecione um Momento:",
            options=timestamps,
            format_func=lambda x: x.strftime('%d/%m/%Y %H:%M')
        )
        
        # Criar duas colunas para os mapas
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Mapa de Precipita√ß√£o")
            # Aqui normalmente chamar√≠amos create_precip_map
            # Por ora vamos mostrar uma imagem placeholder
            st.image("https://via.placeholder.com/800x600?text=Mapa+de+Precipita√ß√£o", use_column_width=True)
            
        with col2:
            st.subheader("Probabilidade de Chuva")
            # Aqui normalmente chamar√≠amos a fun√ß√£o que gera o mapa de probabilidade
            st.image("https://via.placeholder.com/800x600?text=Mapa+de+Probabilidade", use_column_width=True)
        
        # Anima√ß√£o
        st.subheader("Anima√ß√£o da Precipita√ß√£o")
        animation_placeholder = st.empty()
        animation_placeholder.image("https://via.placeholder.com/800x600?text=Anima√ß√£o+(GIF)", use_column_width=True)
        
        # Op√ß√£o para download da anima√ß√£o
        st.download_button(
            label="‚¨áÔ∏è Download da Anima√ß√£o",
            data=io.BytesIO(b"Placeholder para o GIF real"),
            file_name="precipitacao_animacao.gif",
            mime="image/gif"
        )
    
    # Tab 3: Previs√µes
    with tab3:
        st.header("Previs√£o de Precipita√ß√£o")
        
        # Escolha do modelo de previs√£o
        forecast_method = st.radio(
            "M√©todo de Previs√£o:",
            ["Modelo Linear", "Machine Learning", "M√©dia dos M√©todos"],
            horizontal=True
        )
        
        # Gr√°fico de previs√£o
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # Dados hist√≥ricos
        historical_dates = data['daily']['date'].tolist()
        historical_precip = data['daily']['precipitation'].tolist()
        ax.bar(historical_dates, historical_precip, width=0.6, alpha=0.7, color='#1e88e5', label='Hist√≥rico')
        
        # Dados de previs√£o
        forecast_dates = data['forecast']['date'].tolist()
        forecast_precip = data['forecast']['precipitation'].tolist()
        ax.bar(forecast_dates, forecast_precip, width=0.6, alpha=0.7, color='#ff9800', label='Previs√£o')
        
        # Formatar eixos
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m'))
        plt.xticks(rotation=45)
        ax.set_ylabel('Precipita√ß√£o (mm/dia)', fontsize=12)
        ax.set_title(f'Previs√£o de Precipita√ß√£o para {area} - Pr√≥ximos {forecast_days} dias', fontsize=14)
        ax.grid(True, alpha=0.3)
        ax.legend()
        plt.tight_layout()
        
        st.pyplot(fig)
        
        # Detalhes da previs√£o
        st.subheader("Detalhes da Previs√£o")
        
        # Estat√≠sticas de previs√£o
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Precipita√ß√£o Total Prevista", f"{data['forecast']['precipitation'].sum():.1f} mm")
        with col2:
            st.metric("Precipita√ß√£o M√°xima Di√°ria", f"{data['forecast']['precipitation'].max():.1f} mm")
        with col3:
            st.metric("Dias com Chuva Previstos", f"{(data['forecast']['precipitation'] > 0.1).sum()} dias")
        
        # Tabela de previs√£o
        st.subheader("Dados de Previs√£o")
        forecast_display = data['forecast'].copy()
        forecast_display['date'] = forecast_display['date'].dt.strftime('%d/%m/%Y')
        forecast_display = forecast_display[['date', 'precipitation']]
        forecast_display.columns = ['Data', 'Precipita√ß√£o Prevista (mm)']
        st.dataframe(forecast_display, use_container_width=True)
    
    # Tab 4: An√°lise Regional
    with tab4:
        st.header("Compara√ß√£o Entre Regi√µes")
        
        # Selecionar regi√µes para compara√ß√£o
        selected_regions = st.multiselect(
            "Selecione as regi√µes para comparar:",
            list(CAMPOS_GRANDE_AREAS.keys()),
            default=["Centro", "Regi√£o Norte", "Regi√£o Sul"]
        )
        
        if selected_regions:
            # Gr√°fico de compara√ß√£o entre regi√µes
            fig, ax = plt.subplots(figsize=(12, 6))
            
            for region in selected_regions:
                region_data = data['all_regions'][region]
                region_daily = region_data.groupby('date')['precipitation'].sum().reset_index()
                ax.plot(region_daily['date'], region_daily['precipitation'], linewidth=2, label=region)
            
            # Formatar eixos
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m'))
            plt.xticks(rotation=45)
            ax.set_ylabel('Precipita√ß√£o (mm/dia)', fontsize=12)
            ax.set_title('Compara√ß√£o de Precipita√ß√£o Entre Regi√µes', fontsize=14)
            ax.grid(True, alpha=0.3)
            ax.legend()
            plt.tight_layout()
            
            st.pyplot(fig)
            
            # Mapa de calor regional
            st.subheader("Mapa de Calor Regional")
            st.image("https://via.placeholder.com/800x600?text=Mapa+de+Calor+Regional", use_column_width=True)
            
            # Tabela comparativa
            st.subheader("Tabela Comparativa")
            
            # Criar tabela comparativa
            comparison_data = []
            for region in selected_regions:
                region_data = data['all_regions'][region]
                region_daily = region_data.groupby('date')['precipitation'].sum().reset_index()
                
                region_forecast = data['ml_forecast'].get(region, pd.DataFrame())
                if not region_forecast.empty:
                    forecast_sum = region_forecast['precipitation'].sum()
                    forecast_max = region_forecast['precipitation'].max()
                else:
                    forecast_sum = "-"
                    forecast_max = "-"
                
                comparison_data.append({
                    "Regi√£o": region,
                    "Precipita√ß√£o Total (mm)": round(region_daily['precipitation'].sum(), 1),
                    "M√©dia Di√°ria (mm)": round(region_daily['precipitation'].mean(), 1),
                    "M√°xima Di√°ria (mm)": round(region_daily['precipitation'].max(), 1),
                    "Previs√£o Total (mm)": forecast_sum if isinstance(forecast_sum, float) else forecast_sum,
                    "Previs√£o M√°xima (mm)": forecast_max if isinstance(forecast_max, float) else forecast_max
                })
            
            comparison_df = pd.DataFrame(comparison_data)
            st.dataframe(comparison_df, use_container_width=True)
    
    # Rodap√©
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("**Desenvolvedora:** √Åguas Guariroba")
    with col2:
        st.markdown("**Fonte de Dados:** ERA5 - Climate Data Store")
    with col3:
        st.markdown("**√öltima Atualiza√ß√£o:** " + datetime.now().strftime("%d/%m/%Y %H:%M:%S"))

# --- DADOS SIMULADOS PARA DEMONSTRA√á√ÉO ---
def simulate_timeseries_data(start_date, end_date):
    """Simula dados de s√©rie temporal"""
    start = pd.to_datetime(start_date)
    end = pd.to_datetime(end_date)
    times = pd.date_range(start=start, end=end, freq='3H')
    
    # Gerar dados aleat√≥rios com alguns padr√µes
    np.random.seed(42)  # Para reprodutibilidade
    
    # Gerar precipita√ß√£o baseada em padr√µes di√°rios e aleat√≥rios
    precipitation = []
    for t in times:
        hour = t.hour
        # Mais chuva √† tarde
        hour_factor = 0.5 + 0.5 * np.sin(np.pi * (hour - 6) / 12) if 6 <= hour <= 18 else 0.2
        # Padr√£o aleat√≥rio
        random_factor = np.random.exponential(1.0)
        # Alguns eventos de chuva intensa
        intense = 5 * int(np.random.rand() < 0.05)
        
        value = max(0, hour_factor * random_factor + intense)
        precipitation.append(value)
    
    return pd.DataFrame({
        'time': times,
        'precipitation': precipitation
    })

def simulate_daily_data(start_date, end_date):
    """Simula dados di√°rios"""
    start = pd.to_datetime(start_date)
    end = pd.to_datetime(end_date)
    dates = pd.date_range(start=start, end=end, freq='D')
    
    np.random.seed(42)
    precipitation = []
    
    for d in dates:
        # Mais chuva no ver√£o (considerando hemisf√©rio sul)
        month = d.month
        season_factor = 1.5 if (month >= 11 or month <= 3) else 0.7
        # Padr√£o aleat√≥rio
        random_factor = np.random.exponential(1.0)
        
        value = max(0, season_factor * random_factor * 5)
        precipitation.append(value)
    
    return pd.DataFrame({
        'date': dates,
        'precipitation': precipitation
    })

def simulate_forecast_data(end_date, forecast_days):
    """Simula dados de previs√£o"""
    last_date = pd.to_datetime(end_date)
    dates = pd.date_range(start=last_date + timedelta(days=1), periods=forecast_days)
    
    np.random.seed(43)  # Diferente da s√©rie hist√≥rica
    precipitation = []
    
    for d in dates:
        # Mais chuva no ver√£o (considerando hemisf√©rio sul)
        month = d.month
        season_factor = 1.5 if (month >= 11 or month <= 3) else 0.7
        # Padr√£o aleat√≥rio com tend√™ncia de diminui√ß√£o
        day_factor = max(0.1, 1 - (d - dates[0]).days / forecast_days)
        random_factor = np.random.exponential(0.8)
        
        value = max(0, season_factor * day_factor * random_factor * 5)
        precipitation.append(value)
    
    return pd.DataFrame({
        'date': dates,
        'precipitation': precipitation
    })

def simulate_ml_forecast(regions, end_date, forecast_days):
    """Simula previs√µes de ML para cada regi√£o"""
    ml_forecasts = {}
    
    for region in regions:
        last_date = pd.to_datetime(end_date)
        dates = pd.date_range(start=last_date + timedelta(days=1), periods=forecast_days)
        
        np.random.seed(hash(region) % 100)  # Semente diferente para cada regi√£o
        precipitation = []
        
        for d in dates:
            # Variar por regi√£o (norte mais chuvoso que sul, etc.)
            region_factor = 1.2 if "Norte" in region else 0.8 if "Sul" in region else 1.0
            # Mais chuva no ver√£o
            month = d.month
            season_factor = 1.5 if (month >= 11 or month <= 3) else 0.7
            # Padr√£o aleat√≥rio
            random_factor = np.random.exponential(0.8)
            
            value = max(0, region_factor * season_factor * random_factor * 5)
            precipitation.append(value)
        
        ml_forecasts[region] = pd.DataFrame({
            'date': dates,
            'precipitation': precipitation,
            'region': region
        })
    
    return ml_forecasts

# Constantes necess√°rias para o funcionamento (simplificadas)
CAMPOS_GRANDE_AREAS = {
    "Centro": [-20.4697, -54.6201],
    "Regi√£o Norte": [-20.4297, -54.6101],
    "Regi√£o Sul": [-20.5097, -54.6201],
    "Regi√£o Leste": [-20.4697, -54.5801],
    "Regi√£o Oeste": [-20.4697, -54.6601],
    "Regi√£o Centro-Norte": [-20.4397, -54.6301],
    "Regi√£o Centro-Sul": [-20.4997, -54.6301],
    "Regi√£o Nordeste": [-20.4397, -54.5901],
    "Regi√£o Noroeste": [-20.4397, -54.6501],
    "Regi√£o Sudeste": [-20.4997, -54.5901],
    "Regi√£o Sudoeste": [-20.4997, -54.6501]
}

PRECIPITATION_VARIABLES = {
    "total_precipitation": "Precipita√ß√£o Total (mm)",
    "large_scale_precipitation": "Precipita√ß√£o de Grande Escala (mm)",
    "convective_precipitation": "Precipita√ß√£o Convectiva (mm)"
}

COLORMAPS = ["Blues", "viridis", "plasma", "RdYlBu_r", "gist_earth"]

# Definindo um diret√≥rio tempor√°rio para armazenar os arquivos baixados
TEMP_DIR = tempfile.gettempdir()

# ‚úÖ Autentica√ß√£o CDS (ERA5)
@st.cache_resource
def get_cds_client():
    try:
        return cdsapi.Client(
            url="https://cds.climate.copernicus.eu/api",
            key=st.secrets["cds"]["key"]
        )
    except Exception as e:
        st.error(f"‚ùå Erro ao conectar ao Climate Data Store: {str(e)}")
        return None

# --- CONSTANTES E CONFIGURA√á√ïES ---
CAMPOS_GRANDE_AREAS = {
    "Centro": [-20.4697, -54.6201],
    "Regi√£o Norte": [-20.4297, -54.6101],
    "Regi√£o Sul": [-20.5097, -54.6201],
    "Regi√£o Leste": [-20.4697, -54.5801],
    "Regi√£o Oeste": [-20.4697, -54.6601],
    "Regi√£o Centro-Norte": [-20.4397, -54.6301],
    "Regi√£o Centro-Sul": [-20.4997, -54.6301],
    "Regi√£o Nordeste": [-20.4397, -54.5901],
    "Regi√£o Noroeste": [-20.4397, -54.6501],
    "Regi√£o Sudeste": [-20.4997, -54.5901],
    "Regi√£o Sudoeste": [-20.4997, -54.6501]
}

# Mapeamento de vari√°veis para nomes do ERA5
ERA5_VARIABLES = {
    "total_precipitation": "tp",
    "large_scale_precipitation": "lsp",
    "convective_precipitation": "cp"
}

PRECIPITATION_VARIABLES = {
    "total_precipitation": "Precipita√ß√£o Total (mm)",
    "large_scale_precipitation": "Precipita√ß√£o de Grande Escala (mm)",
    "convective_precipitation": "Precipita√ß√£o Convectiva (mm)"
}

COLORMAPS = ["Blues", "viridis", "plasma", "RdYlBu_r", "gist_earth"]

# Coordenadas aproximadas para o mapa de Campo Grande
CAMPO_GRANDE_BOUNDS = {
    'north': -20.35,
    'south': -20.60,
    'east': -54.50,
    'west': -54.75
}

# Coordenadas da √°rea urbana de Campo Grande
CAMPO_GRANDE_SHAPE = {
    'bounding_box': {
        'north': -20.35,
        'south': -20.60,
        'east': -54.50,
        'west': -54.75
    }
}

# Shapefile de Campo Grande (definido inline para evitar depend√™ncias de arquivo)
@st.cache_data
def get_campo_grande_shapefile():
    # URL do shapefile de Campo Grande ou gerar um aproximado
    try:
        # Tentar carregar o shapefile do Github ou outra fonte
        url = "https://raw.githubusercontent.com/CampoGrandeData/GIS/main/campo_grande_urban_area.geojson"
        campo_grande_gdf = gpd.read_file(url)
        return campo_grande_gdf
    except Exception as e:
        logger.warning(f"Erro ao carregar shapefile externo: {str(e)}")
        
        # Criar um pol√≠gono simples baseado no bounding box como alternativa
        from shapely.geometry import Polygon
        
        bbox = CAMPO_GRANDE_BOUNDS
        polygon = Polygon([
            (bbox['west'], bbox['north']),
            (bbox['east'], bbox['north']),
            (bbox['east'], bbox['south']),
            (bbox['west'], bbox['south'])
        ])
        
        # Criar GeoDataFrame
        gdf = gpd.GeoDataFrame(geometry=[polygon], crs="EPSG:4326")
        return gdf

# --- FUN√á√ïES AUXILIARES ---
def setup_sidebar():
    """Configura a barra lateral com par√¢metros de entrada"""
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
    
    # Sele√ß√£o de regi√£o
    area = st.sidebar.selectbox("Selecione a regi√£o", list(CAMPOS_GRANDE_AREAS.keys()))
    lat_center, lon_center = CAMPOS_GRANDE_AREAS[area]
    
    # Per√≠odo de an√°lise
    st.sidebar.subheader("Per√≠odo de An√°lise")
    today = datetime.today()
    start_date = st.sidebar.date_input("Data In√≠cio", today - timedelta(days=7))
    end_date = st.sidebar.date_input("Data Fim", today + timedelta(days=5))
    
    # Hor√°rios
    all_hours = [f"{h:02d}:00" for h in range(0, 24, 3)]
    start_hour = st.sidebar.selectbox("Hora Inicial", all_hours)
    end_hour = st.sidebar.selectbox("Hora Final", all_hours, index=len(all_hours)-1)
    
    # Vari√°vel de precipita√ß√£o
    precip_var = st.sidebar.selectbox(
        "Vari√°vel", 
        list(PRECIPITATION_VARIABLES.keys()),
        format_func=lambda x: PRECIPITATION_VARIABLES[x]
    )
    
    # Forecast horizon
    forecast_days = st.sidebar.slider("Horizonte de Previs√£o (dias)", 1, 14, 7)
    
    # Op√ß√µes avan√ßadas
    with st.sidebar.expander("Configura√ß√µes Avan√ßadas"):
        map_width = st.slider("Largura do Mapa (graus)", 0.1, 2.0, 0.3, 0.1)
        animation_speed = st.slider("Velocidade Anima√ß√£o (ms)", 200, 1000, 500)
        colormap = st.selectbox("Paleta de Cores", COLORMAPS)
        product_type = st.radio("Tipo de Produto", ["reanalysis", "ensemble_mean"])
        ml_model = st.selectbox("Modelo de Previs√£o", ["RandomForest", "GradientBoosting", "LinearRegression"])
        probability_threshold = st.slider("Limiar de Probabilidade (%)", 0, 100, 30)
        show_shapefile = st.checkbox("Mostrar √Årea Urbana", value=True)
        satellite_background = st.checkbox("Usar Imagem de Sat√©lite", value=True)
    
    return {
        'area': area,
        'lat_center': lat_center,
        'lon_center': lon_center,
        'start_date': start_date,
        'end_date': end_date,
        'start_hour': int(start_hour.split(':')[0]),
        'end_hour': int(end_hour.split(':')[0]),
        'precip_var': precip_var,
        'map_width': map_width,
        'animation_speed': animation_speed,
        'colormap': colormap,
        'product_type': product_type,
        'forecast_days': forecast_days,
        'ml_model': ml_model,
        'probability_threshold': probability_threshold,
        'show_shapefile': show_shapefile,
        'satellite_background': satellite_background
    }

def download_era5_data(params, client):
    """Baixa dados do ERA5 com tratamento robusto de vari√°veis"""
    try:
        # Verificar se as datas s√£o v√°lidas
        if params['start_date'] > params['end_date']:
            st.error("‚ùå Data de in√≠cio maior que data de fim")
            return None
            
        # Se n√£o temos cliente CDS, simular dados para demonstra√ß√£o
        if client is None:
            st.warning("‚ö†Ô∏è Usando dados simulados para demonstra√ß√£o (CDS n√£o dispon√≠vel)")
            return simulate_era5_data(params)

        # Obter nome correto da vari√°vel no ERA5
        era5_var = ERA5_VARIABLES.get(params['precip_var'])
        if not era5_var:
            st.error(f"‚ùå Vari√°vel {params['precip_var']} n√£o mapeada")
            return None

        # Usar um arquivo tempor√°rio em vez de salvar diretamente no diret√≥rio atual
        with tempfile.NamedTemporaryFile(suffix='.nc', delete=False, dir=TEMP_DIR) as temp_file:
            filename = temp_file.name
        
        area = [
            params['lat_center'] + params['map_width'],
            params['lon_center'] - params['map_width'],
            params['lat_center'] - params['map_width'],
            params['lon_center'] + params['map_width']
        ]

        # Converter objetos date para strings no formato esperado pelo ERA5
        start_date_str = params['start_date'].strftime('%Y-%m-%d')
        end_date_str = params['end_date'].strftime('%Y-%m-%d')
        
        date_range = pd.date_range(start_date_str, end_date_str)
        time_list = [f"{h:02d}:00" for h in range(params['start_hour'], params['end_hour'] + 1, 3)]
        
        if len(time_list) == 0:
            time_list = ["00:00", "03:00", "06:00", "09:00", "12:00", "15:00", "18:00", "21:00"]

        request = {
            'product_type': params['product_type'],
            'variable': era5_var,
            'year': sorted(list({str(d.year) for d in date_range})),
            'month': sorted(list({f"{d.month:02d}" for d in date_range})),
            'day': sorted(list({f"{d.day:02d}" for d in date_range})),
            'time': time_list,
            'area': area,
            'format': 'netcdf'
        }

        with st.spinner("‚åõ Baixando dados do ERA5..."):
            client.retrieve('reanalysis-era5-single-levels', request, filename)

        if not os.path.exists(filename):
            st.error("‚ùå Arquivo n√£o foi baixado corretamente")
            return None

        # Processar arquivo NetCDF
        with xr.open_dataset(filename) as ds:
            # Verificar e padronizar dimens√£o temporal
            time_dims = [dim for dim in ds.dims if 'time' in dim.lower()]
            if not time_dims:
                st.error("‚ùå Nenhuma dimens√£o temporal encontrada")
                return None
                
            if time_dims[0] != 'time':
                ds = ds.rename({time_dims[0]: 'time'})
            
            ds['time'] = pd.to_datetime(ds.time.values)
            
            # Renomear vari√°vel para nome padr√£o do c√≥digo
            if era5_var in ds:
                ds = ds.rename({era5_var: params['precip_var']})
            
            # Converter unidades (m para mm)
            ds[params['precip_var']] = ds[params['precip_var']] * 1000
            ds[params['precip_var']].attrs['units'] = 'mm'
            
            # Salvar em um novo arquivo tempor√°rio
            with tempfile.NamedTemporaryFile(suffix='.nc', delete=False, dir=TEMP_DIR) as processed_file:
                processed_filename = processed_file.name
            
            ds.to_netcdf(processed_filename)
            
        # Remover o arquivo original tempor√°rio
        try:
            os.remove(filename)
        except:
            pass
            
        return xr.open_dataset(processed_filename)

    except Exception as e:
        st.error(f"‚ùå Erro no download: {str(e)}")
        logger.exception("Falha no download")
        st.warning("‚ö†Ô∏è Usando dados simulados para demonstra√ß√£o")
        return simulate_era5_data(params)

def simulate_era5_data(params):
    """Simula dados ERA5 para demonstra√ß√£o"""
    try:
        # Criar malha de coordenadas
        lat_min = params['lat_center'] - params['map_width']
        lat_max = params['lat_center'] + params['map_width']
        lon_min = params['lon_center'] - params['map_width']
        lon_max = params['lon_center'] + params['map_width']
        
        lats = np.linspace(lat_min, lat_max, 20)
        lons = np.linspace(lon_min, lon_max, 20)
        
        # Criar datas
        start_date = pd.to_datetime(params['start_date'])
        end_date = pd.to_datetime(params['end_date'])
        times = pd.date_range(start=start_date, end=end_date, freq='3H')
        
        # Fun√ß√£o para gerar dados simulados de precipita√ß√£o
        def generate_precip(time, lat, lon):
            # Padr√£o sazonal
            seasonal = np.sin(2 * np.pi * (time.dayofyear / 365)) + 1
            # Padr√£o espacial: mais chuva ao norte
            spatial = (lat - lat_min) / (lat_max - lat_min)
            # Aleat√≥rio
            random = np.random.exponential(1.0)
            # Alguns eventos intensos
            intense = 5 * int(np.random.rand() < 0.05)
            
            # Combinar fatores
            value = (seasonal * 0.5 + spatial * 0.3 + random * 0.2 + intense) * 2
            return max(0, value)
        
        # Gerar dados
        data = np.zeros((len(times), len(lats), len(lons)))
        
        for t, time in enumerate(times):
            for i, lat in enumerate(lats):
                for j, lon in enumerate(lons):
                    data[t, i, j] = generate_precip(time, lat, lon)
        
        # Criar dataset
        ds = xr.Dataset(
            data_vars={
                params['precip_var']: (('time', 'latitude', 'longitude'), data)
            },
            coords={
                'time': times,
                'latitude': lats,
                'longitude': lons
            }
        )
        
        # Adicionar atributos
        ds[params['precip_var']].attrs['units'] = 'mm'
        
        return ds
        
    except Exception as e:
        logger.exception(f"Erro ao simular dados: {e}")
        st.error("Erro ao gerar dados simulados")
        return None

def process_precipitation_data(ds, params):
    """Processa os dados de precipita√ß√£o com verifica√ß√£o robusta"""
    try:
        # Verificar se a vari√°vel existe no dataset
        if params['precip_var'] not in ds.variables:
            available_vars = list(ds.variables.keys())
            st.error(f"‚ùå Vari√°vel n√£o encontrada. Dispon√≠veis: {available_vars}")
            return None

        def extract_point_data(ds, lat, lon):
            try:
                lat_idx = np.abs(ds.latitude - lat).argmin().item()
                lon_idx = np.abs(ds.longitude - lon).argmin().item()
                
                point_data = ds[params['precip_var']].isel(
                    latitude=lat_idx,
                    longitude=lon_idx
                )
                
                df = point_data.to_dataframe().reset_index()
                time_col = [col for col in df.columns if 'time' in col.lower()][0]
                
                return df.rename(columns={
                    params['precip_var']: 'precipitation',
                    time_col: 'time'
                })
                
            except Exception as e:
                logger.warning(f"Erro ao extrair dados: {str(e)}")
                return pd.DataFrame()
        
        # Processar dados
        df = extract_point_data(ds, params['lat_center'], params['lon_center'])
        if df.empty:
            return None
            
        all_regions = {}
        for region, (lat, lon) in CAMPOS_GRANDE_AREAS.items():
            region_df = extract_point_data(ds, lat, lon)
            if not region_df.empty:
                all_regions[region] = region_df
        
        df['date'] = df['time'].dt.date
        daily = df.groupby('date')['precipitation'].sum().reset_index()
        
        return {
            'dataset': ds,
            'timeseries': df,
            'daily': daily,
            'forecast': generate_forecast(df, params),
            'all_regions': all_regions,
            'ml_forecast': generate_ml_forecast(all_regions, params),
            'probability_map': generate_probability_map(ds, params)
        }
        
    except Exception as e:
        st.error(f"‚ùå Erro no processamento: {str(e)}")
        logger.exception("Erro no processamento de dados")
        return None

def generate_forecast(df, params):
    """Gera previs√£o simples baseada em m√©dia m√≥vel"""
    if df.empty:
        return pd.DataFrame()
    
    try:
        # Criar dataframe di√°rio completo
        df['date'] = pd.to_datetime(df['time'].dt.date)
        daily_data = df.groupby('date')['precipitation'].sum().reset_index()
        
        # Se temos menos de 7 dias de dados, n√£o conseguimos fazer uma previs√£o confi√°vel
        if len(daily_data) < 7:
            return pd.DataFrame()
        
        # Adicionar features temporais
        daily_data['dayofyear'] = daily_data['date'].dt.dayofyear
        daily_data['month'] = daily_data['date'].dt.month
        daily_data['trend'] = np.arange(len(daily_data))
        
        # Calcular m√©dia m√≥vel de 3 e 7 dias
        daily_data['precip_ma3'] = daily_data['precipitation'].rolling(window=3, min_periods=1).mean()
        daily_data['precip_ma7'] = daily_data['precipitation'].rolling(window=7, min_periods=1).mean()
        
        # Preparar dados para previs√£o
        X = daily_data[['dayofyear', 'month', 'trend', 'precip_ma3', 'precip_ma7']].values
        y = daily_data['precipitation'].values
        
        # Treinar modelo de regress√£o linear
        model = LinearRegression()
        model.fit(X, y)
        
        # Gerar datas futuras para previs√£o
        last_date = daily_data['date'].iloc[-1]
        future_dates = pd.date_range(start=last_date + timedelta(days=1), 
                                    periods=params['forecast_days'])
        
        # Preparar features para previs√£o
        future_df = pd.DataFrame({
            'date': future_dates,
            'dayofyear': [d.dayofyear for d in future_dates],
            'month': [d.month for d in future_dates],
            'trend': np.arange(len(daily_data), len(daily_data) + len(future_dates))
        })
        
        # Inicializar com m√©dias m√≥veis dos √∫ltimos dias
        future_df['precip_ma3'] = daily_data['precipitation'].iloc[-3:].mean()
        future_df['precip_ma7'] = daily_data['precipitation'].iloc[-7:].mean()
        
        # Fazer previs√£o sequencial
        predictions = []
        
        for i in range(len(future_df)):
            X_pred = future_df.iloc[i:i+1][['dayofyear', 'month', 'trend', 'precip_ma3', 'precip_ma7']].values
            pred = max(0, model.predict(X_pred)[0])  # N√£o permitir precipita√ß√£o negativa
            predictions.append(pred)
            
            # Atualizar m√©dias m√≥veis para pr√≥ximas previs√µes
            recent_vals = list(daily_data['precipitation'].iloc[-2:].values) + predictions[:i+1]
            future_df.loc[future_df.index[i], 'precip_ma3'] = np.mean(recent_vals[-3:])
            
            recent_vals_7 = list(daily_data['precipitation'].iloc[-6:].values) + predictions[:i+1]
            future_df.loc[future_df.index[i], 'precip_ma7'] = np.mean(recent_vals_7[-7:])
        
        future_df['precipitation'] = predictions
        
        return future_df
        
    except Exception as e:
        logger.exception(f"Erro ao gerar previs√£o: {e}")
        return pd.DataFrame()

def generate_ml_forecast(all_regions, params):
    """Gera previs√£o usando machine learning para todas as regi√µes"""
    if not all_regions:
        return {}
    
    try:
        ml_forecasts = {}
        
        for region, df in all_regions.items():
            if df.empty:
                continue
                
            # Preparar dados di√°rios
            df['date'] = pd.to_datetime(df['time'].dt.date)
            daily = df.groupby('date')['precipitation'].sum().reset_index()
            
            # Se temos poucos dados, pular
            if len(daily) < 7:
                continue
            
            # Criar features para o modelo
            daily['dayofyear'] = daily['date'].dt.dayofyear
            daily['month'] = daily['date'].dt.month
            daily['day'] = daily['date'].dt.day
            daily['year'] = daily['date'].dt.year
            
            # Adicionar m√©dias m√≥veis e lags como features
            for window in [3, 7]:
                daily[f'ma_{window}'] = daily['precipitation'].rolling(window=window, min_periods=1).mean()
            
            for lag in [1, 2, 3]:
                daily[f'lag_{lag}'] = daily['precipitation'].shift(lag).fillna(0)
            
            # Criar matriz de features e target
            features = ['dayofyear', 'month', 'day', 'ma_3', 'ma_7', 'lag_1', 'lag_2', 'lag_3']
            X = daily[features].values
            y = daily['precipitation'].values
            
            # Selecionar e treinar modelo
            if params['ml_model'] == 'RandomForest':
                model = Pipeline([
                    ('scaler', StandardScaler()),
                    ('model', RandomForestRegressor(n_estimators=100, random_state=42))
                ])
            elif params['ml_model'] == 'GradientBoosting':
                model = Pipeline([
                    ('scaler', StandardScaler()),
                    ('model', GradientBoostingRegressor(n_estimators=100, random_state=42))
                ])
            else:  # LinearRegression
                model = Pipeline([
                    ('scaler', StandardScaler()),
                    ('model', LinearRegression())
                ])
            
            model.fit(X, y)
            
            # Gerar datas futuras
            last_date = daily['date'].iloc[-1]
            future_dates = pd.date_range(start=last_date + timedelta(days=1), 
                                         periods=params['forecast_days'])
            
            # Criar dataframe para previs√£o
            forecast_df = pd.DataFrame({
                'date': future_dates,
                'dayofyear': [d.dayofyear for d in future_dates],
                'month': [d.month for d in future_dates],
                'day': [d.day for d in future_dates],
                'year': [d.year for d in future_dates]
            })
            
            # Inicializar com valores recentes
            forecast_df['ma_3'] = daily['precipitation'].iloc[-3:].mean()
            forecast_df['ma_7'] = daily['precipitation'].iloc[-7:].mean()
            forecast_df['lag_1'] = daily['precipitation'].iloc[-1]
            forecast_df['lag_2'] = daily['precipitation'].iloc[-2] if len(daily) > 1 else 0
            forecast_df['lag_3'] = daily['precipitation'].iloc[-3] if len(daily) > 2 else 0
            
            # Fazer previs√£o sequencial
            predictions = []
            
            for i in range(len(forecast_df)):
                X_pred = forecast_df.iloc[i:i+1][features].values
                pred = max(0, model.predict(X_pred)[0])  # N√£o permitir precipita√ß√£o negativa
                predictions.append(pred)
                
                # Atualizar lags para pr√≥xima previs√£o
                if i + 1 < len(forecast_df):
                    forecast_df.loc[forecast_df.index[i+1], 'lag_1'] = pred
                    if i > 0:
                        forecast_df.loc[forecast_df.index[i+1], 'lag_2'] = predictions[i-1]
                    if i > 1:
                        forecast_df.loc[forecast_df.index[i+1], 'lag_3'] = predictions[i-2]
                    
                    # Atualizar m√©dias m√≥veis
                    if i >= 2:
                        forecast_df.loc[forecast_df.index[i+1], 'ma_3'] = np.mean(predictions[i-2:i+1])
                    if i >= 6:
                        forecast_df.loc[forecast_df.index[i+1], 'ma_7'] = np.mean(predictions[i-6:i+1])
            
            forecast_df['precipitation'] = predictions
            forecast_df['region'] = region
            
            ml_forecasts[region] = forecast_df
        
        return ml_forecasts
        
    except Exception as e:
        logger.exception(f"Erro ao gerar previs√£o ML: {e}")
        return {}

def generate_probability_map(ds, params):
    """Gera mapa de probabilidade de precipita√ß√£o"""
    try:
        # Calcular probabilidade de chuva para cada ponto de grade
        precip_var = params['precip_var']
        threshold = 0.1  # mm - limiar para considerar como chuva
        
        # Calcular a probabilidade hist√≥rica
        prob = (ds[precip_var] > threshold).mean(dim='time') * 100
        
        # Criar figura
        fig = plt.figure(figsize=(10, 8))
        
        # Configurar mapa base
        if params['satellite_background']:
            # Usar imagem de sat√©lite como base
            ax = plt.axes(projection=ccrs.PlateCarree())
            imagery = cimgt.GoogleTiles(style='satellite')
            ax.add_image(imagery, 8)  # Zoom level
        else:
            ax = plt.axes(projection=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE)
            ax.add_feature(cfeature.BORDERS, linestyle=':')
            ax.add_feature(cfeature.STATES, linestyle=':')
        
        # Configurar limites do mapa
        lat_center, lon_center = params['lat_center'], params['lon_center']
        map_width = params['map_width']
        ax.set_extent([
            lon_center - map_width, lon_center + map_width,
            lat_center - map_width, lat_center + map_width
        ])
        
        # Plotar probabilidade
        img = ax.pcolormesh(
            ds.longitude, ds.latitude, prob,
            transform=ccrs.PlateCarree(),
            cmap='YlGnBu',
            vmin=0, vmax=100,
            alpha=0.7  # Transpar√™ncia para ver imagem de fundo
        )
        
        # Adicionar contorno para √°reas com probabilidade acima do limiar
        ax.contour(
            ds.longitude, ds.latitude, prob, 
            levels=[params['probability_threshold']], 
            colors='red', linewidths=1
        )
        
        # Adicionar shapefile da √°rea urbana se solicitado
        if params['show_shapefile']:
            campo_grande_gdf = get_campo_grande_shapefile()
            campo_grande_gdf.plot(
                ax=ax,
                edgecolor='black',
                facecolor='none',
                linewidth=1.5,
                transform=ccrs.PlateCarree()
            )
        
        # Adicionar colorbar
        cbar = plt.colorbar(img, ax=ax, pad=0.05)
        cbar.set_label('Probabilidade de Chuva (%)')
        
        # Adicionar pontos das regi√µes de interesse
        for region, (lat, lon) in CAMPOS_GRANDE_AREAS.items():
            ax.plot(lon, lat, 'ro', markersize=4)
            ax.text(lon + 0.01, lat + 0.01, region, fontsize=8,
                   transform=ccrs.PlateCarree(), fontweight='bold', color='white',
                   path_effects=[withStroke(linewidth=2, foreground='black')])
        
        plt.title(f"Probabilidade de Precipita√ß√£o > {threshold}mm")
        plt.tight_layout()
        
        return fig
        
    except Exception as e:
        logger.exception(f"Erro ao gerar mapa de probabilidade: {e}")
        return plt.figure()

# Fun√ß√£o para adicionar contorno ao texto para melhor visibilidade sobre fundo de sat√©lite
from matplotlib.patheffects import withStroke

def create_precip_map(ds, params, timestamp=None):
    """Cria mapa de precipita√ß√£o para um timestamp espec√≠fico ou m√©dia total"""
    try:
        # Selecionar dados para o timestamp espec√≠fico ou usar m√©dia
        if timestamp is not None:
            time_index = np.abs(ds.time.values - np.datetime64(timestamp)).argmin()
            data = ds[params['precip_var']].isel(time=time_index)
            title = f"Precipita√ß√£o ({params['precip_var']}) - {pd.to_datetime(timestamp).strftime('%d/%m/%Y %H:%M')}"
        else:
            data = ds[params['precip_var']].mean(dim='time')
            title = f"Precipita√ß√£o M√©dia ({params['precip_var']})"
        
        # Criar figura
        fig = plt.figure(figsize=(10, 8))
        
        # Configurar mapa base
        if params['satellite_background']:
            ax = plt.axes(projection=ccrs.PlateCarree())
            imagery = cimgt.GoogleTiles(style='satellite')
            ax.add_image(imagery, 8)
        else:
            ax = plt.axes(projection=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE)
            ax.add_feature(cfeature.BORDERS, linestyle=':')
            ax.add_feature(cfeature.STATES, linestyle=':')
        
        # Configurar limites do mapa
        lat_center, lon_center = params['lat_center'], params['lon_center']
        map_width = params['map_width']
        ax.set_extent([
            lon_center - map_width, lon_center + map_width,
            lat_center - map_width, lat_center + map_width
        ])
        
        # Plotar dados
        img = ax.pcolormesh(
            ds.longitude, ds.latitude, data,
            transform=ccrs.PlateCarree(),
            cmap=params['colormap'],
            vmin=0, vmax=data.max().item() * 1.1 or 10,
            alpha=0.7
        )
        
        # Adicionar shapefile da √°rea urbana se solicitado
        if params['show_shapefile']:
            campo_grande_gdf = get_campo_grande_shapefile()
            campo_grande_gdf.plot(
                ax=ax,
                edgecolor='black',
                facecolor='none',
                linewidth=1.5,
                transform=ccrs.PlateCarree()
            )
        
        # Adicionar colorbar
        cbar = plt.colorbar(img, ax=ax, pad=0.05)
        cbar.set_label('Precipita√ß√£o (mm)')
        
        # Adicionar pontos das regi√µes de interesse
        for region, (lat, lon) in CAMPOS_GRANDE_AREAS.items():
            ax.plot(lon, lat, 'ro', markersize=4)
            ax.text(lon + 0.01, lat + 0.01, region, fontsize=8,
                   transform=ccrs.PlateCarree(), fontweight='bold', color='white',
                   path_effects=[withStroke(linewidth=2, foreground='black')])
        
        plt.title(title)
        plt.tight_layout()
        
        return fig
        
    except Exception as e:
        logger.exception(f"Erro ao criar mapa: {e}")
        return plt.figure()

# Iniciar a aplica√ß√£o
if __name__ == "__main__":
    main()
