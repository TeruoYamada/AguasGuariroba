import cdsapi
import xarray as xr
import numpy as np
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from matplotlib import animation
import streamlit as st
from datetime import datetime, timedelta
import os
import pandas as pd
import geopandas as gpd
import matplotlib.dates as mdates
from sklearn.linear_model import LinearRegression
from matplotlib.colors import LinearSegmentedColormap

# Configura√ß√£o inicial da p√°gina
st.set_page_config(layout="wide", page_title="Previs√£o de Precipita√ß√£o - Campo Grande (√Årea Urbana)")

# Fun√ß√£o para carregar as credenciais do CDS API
try:
    # Tente carregar a partir de secrets.toml
    cds_url = st.secrets.get("cds", {}).get("url", "https://cds.climate.copernicus.eu/api/v2")
    cds_key = st.secrets.get("cds", {}).get("key", None)
    
    # Se n√£o houver chave nos secrets, tente usar vari√°veis de ambiente
    if not cds_key:
        import os
        cds_key = os.environ.get("CDS_KEY", None)
        
    # Se ainda n√£o houver chave, permita entrada manual
    if not cds_key:
        if 'cds_key_input' not in st.session_state:
            st.session_state.cds_key_input = ''
            
        st.sidebar.markdown("### Credenciais do CDS API")
        cds_key = st.sidebar.text_input("CDS API Key:", value=st.session_state.cds_key_input, type="password")
        st.session_state.cds_key_input = cds_key
        
        if not cds_key:
            st.warning("Por favor, insira sua chave API do Copernicus Climate Data Store")
            st.stop()
            
    # Inicializar cliente CDS API
    client = cdsapi.Client(url=cds_url, key=cds_key)
    
except Exception as e:
    st.error(f"‚ùå Erro ao configurar o cliente CDS API: {str(e)}")
    st.warning("Verifique suas credenciais ou configure o arquivo secrets.toml adequadamente.")
    st.stop()

# Defini√ß√£o da √°rea urbana de Campo Grande
# Coordenadas aproximadas do centro e bairros de Campo Grande
campo_grande_areas = {
    "Centro": [-20.4697, -54.6201],
    "Regi√£o Norte": [-20.4297, -54.6101],
    "Regi√£o Sul": [-20.5097, -54.6201],
    "Regi√£o Leste": [-20.4697, -54.5801],
    "Regi√£o Oeste": [-20.4697, -54.6601],
    "Regi√£o Centro-Norte": [-20.4397, -54.6301],
    "Regi√£o Centro-Sul": [-20.4997, -54.6301],
    "Regi√£o Nordeste": [-20.4397, -54.5901],
    "Regi√£o Noroeste": [-20.4397, -54.6501],
    "Regi√£o Sudeste": [-20.4997, -54.5901],
    "Regi√£o Sudoeste": [-20.4997, -54.6501]
}

# Vari√°veis de precipita√ß√£o dispon√≠veis no ERA5
precipitation_variables = {
    "total_precipitation": "Precipita√ß√£o Total (mm)",
    "large_scale_precipitation": "Precipita√ß√£o de Grande Escala (mm)",
    "convective_precipitation": "Precipita√ß√£o Convectiva (mm)"
}

# T√≠tulos e introdu√ß√£o
st.title("üåßÔ∏è Monitoramento e Previs√£o de Precipita√ß√£o - Campo Grande (√Årea Urbana)")
st.markdown("""
Este aplicativo permite visualizar e analisar dados de precipita√ß√£o para a √°rea urbana de Campo Grande, MS. 
Os dados s√£o obtidos do Copernicus Climate Data Store (CDS), usando o dataset ERA5.
""")

# Barra lateral para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")

# Sele√ß√£o de regi√£o da cidade
st.sidebar.subheader("Localiza√ß√£o")
area = st.sidebar.selectbox("Selecione a regi√£o da cidade", list(campo_grande_areas.keys()))

# Determinar coordenadas da regi√£o selecionada
lat_center, lon_center = campo_grande_areas[area]

# Configura√ß√µes de data e hora
st.sidebar.subheader("Per√≠odo de An√°lise")
start_date = st.sidebar.date_input("Data de In√≠cio", datetime.today())
end_date = st.sidebar.date_input("Data Final", datetime.today() + timedelta(days=5))

all_hours = list(range(0, 24, 3))
start_hour = st.sidebar.selectbox("Hor√°rio Inicial", all_hours, format_func=lambda x: f"{x:02d}:00")
end_hour = st.sidebar.selectbox("Hor√°rio Final", all_hours, index=len(all_hours)-1, format_func=lambda x: f"{x:02d}:00")

# Sele√ß√£o da vari√°vel de precipita√ß√£o
st.sidebar.subheader("Vari√°vel de Precipita√ß√£o")
precip_var = st.sidebar.selectbox(
    "Selecione a vari√°vel", 
    list(precipitation_variables.keys()),
    format_func=lambda x: precipitation_variables[x]
)

# Op√ß√µes avan√ßadas
st.sidebar.subheader("Op√ß√µes Avan√ßadas")
with st.sidebar.expander("Configura√ß√µes da Visualiza√ß√£o"):
    map_width = st.slider("Largura do Mapa (graus)", 0.1, 2.0, 0.3, step=0.1)
    animation_speed = st.slider("Velocidade da Anima√ß√£o (ms)", 200, 1000, 500)
    colormap = st.selectbox("Paleta de Cores", 
                           ["Blues", "viridis", "plasma", "RdYlBu_r", "gist_earth"])
    
    # Op√ß√µes de proje√ß√£o do produto
    product_type = st.radio(
        "Tipo de Produto",
        ["reanalysis", "ensemble_mean"],
        index=0,
        help="Reanalysis: dados hist√≥ricos processados; Ensemble mean: m√©dia das previs√µes"
    )

# Fun√ß√£o para extrair valores de precipita√ß√£o para um ponto espec√≠fico
def extract_point_timeseries(ds, lat, lon, var_name='total_precipitation'):
    """Extrai s√©rie temporal de um ponto espec√≠fico do dataset."""
    lat_idx = np.abs(ds.latitude.values - lat).argmin()
    lon_idx = np.abs(ds.longitude.values - lon).argmin()
    
    # Identificar a dimens√£o temporal
    time_dim = 'time' if 'time' in ds.dims else 'forecast_time' if 'forecast_time' in ds.dims else None
    
    if not time_dim:
        return pd.DataFrame(columns=['time', 'precipitation'])
    
    # Extrair valores para todas as horas dispon√≠veis
    times = []
    values = []
    
    for t_idx in range(len(ds[time_dim])):
        try:
            # Para lidar com diferentes estruturas de dados
            if len(ds[var_name].dims) > 2:  # Tem dimens√£o de tempo
                value = float(ds[var_name].isel({time_dim: t_idx, 'latitude': lat_idx, 'longitude': lon_idx}).values)
            else:  # N√£o tem dimens√£o de tempo (um √∫nico passo de tempo)
                value = float(ds[var_name].isel({'latitude': lat_idx, 'longitude': lon_idx}).values)
                
            times.append(pd.to_datetime(ds[time_dim].isel({time_dim: t_idx}).values))
            values.append(value)
        except Exception as e:
            st.warning(f"Erro ao extrair valor para o tempo {t_idx}: {str(e)}")
            continue
    
    # Criar DataFrame
    if times and values:
        df = pd.DataFrame({'time': times, 'precipitation': values})
        
        # Converter unidades se necess√°rio (de m para mm)
        if var_name in ['total_precipitation', 'large_scale_precipitation', 'convective_precipitation']:
            df['precipitation'] = df['precipitation'] * 1000  # m para mm
            
        df = df.sort_values('time').reset_index(drop=True)
        return df
    else:
        return pd.DataFrame(columns=['time', 'precipitation'])

# Fun√ß√£o para prever valores futuros de precipita√ß√£o
def predict_future_precipitation(df, days=3):
    """Gera uma previs√£o simples de precipita√ß√£o baseada nos dados hist√≥ricos."""
    if len(df) < 3:  # Precisa de pelo menos 3 pontos para uma previs√£o m√≠nima
        return pd.DataFrame(columns=['time', 'precipitation', 'type'])
    
    # Preparar dados para regress√£o
    df_hist = df.copy()
    df_hist['time_numeric'] = (df_hist['time'] - df_hist['time'].min()).dt.total_seconds()
    
    # Modelo de regress√£o linear simples - usamos para tend√™ncia geral
    X = df_hist['time_numeric'].values.reshape(-1, 1)
    y = df_hist['precipitation'].values
    model = LinearRegression()
    model.fit(X, y)
    
    # Gerar pontos futuros
    last_time = df_hist['time'].max()
    future_times = [last_time + timedelta(hours=i*6) for i in range(1, days*4+1)]  # 4 pontos por dia (6h)
    future_time_numeric = [(t - df_hist['time'].min()).total_seconds() for t in future_times]
    
    # Prever valores
    future_precip = model.predict(np.array(future_time_numeric).reshape(-1, 1))
    
    # Adicionar componente sazonal (ciclo di√°rio simples)
    for i, t in enumerate(future_times):
        hour = t.hour
        # Ciclo di√°rio: mais chuva √† tarde
        hour_factor = 1.0 + 0.5 * np.sin(np.pi * (hour - 6) / 12)
        future_precip[i] *= hour_factor
    
    # Limitar valores previstos (precipita√ß√£o n√£o pode ser negativa)
    future_precip = np.maximum(future_precip, 0)
    
    # Criar DataFrame com previs√£o
    df_pred = pd.DataFrame({
        'time': future_times,
        'precipitation': future_precip,
        'type': 'forecast'
    })
    
    # Adicionar indicador aos dados hist√≥ricos
    df_hist['type'] = 'historical'
    
    # Combinar hist√≥rico e previs√£o
    result = pd.concat([df_hist[['time', 'precipitation', 'type']], df_pred], ignore_index=True)
    return result

# Fun√ß√£o para calcular acumulado di√°rio de precipita√ß√£o
def calculate_daily_precipitation(df):
    """Calcula a precipita√ß√£o acumulada por dia."""
    df['date'] = df['time'].dt.date
    daily_precip = df.groupby('date')['precipitation'].sum().reset_index()
    daily_precip['precipitation'] = daily_precip['precipitation'].round(1)  # Arredondar para 1 casa decimal
    return daily_precip

# Fun√ß√£o para calcular estat√≠sticas de precipita√ß√£o
def calculate_precipitation_stats(df):
    """Calcula estat√≠sticas b√°sicas de precipita√ß√£o."""
    if df.empty:
        return None
    
    stats = {
        'total': df['precipitation'].sum(),
        'max': df['precipitation'].max(),
        'mean': df['precipitation'].mean(),
        'days_with_rain': (df.groupby('date')['precipitation'].sum() > 0.1).sum()
    }
    
    return stats

# Fun√ß√£o para obter emoji baseado no valor de precipita√ß√£o
def get_precipitation_emoji(value):
    """Retorna um emoji baseado no valor de precipita√ß√£o."""
    if value == 0:
        return "‚òÄÔ∏è"  # Sol (sem chuva)
    elif value < 2.5:
        return "üå¶Ô∏è"  # Sol com nuvem de chuva (chuva fraca)
    elif value < 10:
        return "üåßÔ∏è"  # Nuvem com chuva (chuva moderada)
    elif value < 25:
        return "‚õàÔ∏è"  # Nuvem com chuva e trov√£o (chuva forte)
    else:
        return "üåä"  # Onda (chuva muito forte/inunda√ß√£o)

# Fun√ß√£o para categorizar intensidade de precipita√ß√£o
def categorize_precipitation(value):
    """Categoriza a intensidade da precipita√ß√£o."""
    if value == 0:
        return "Sem chuva", "green"
    elif value < 2.5:
        return "Chuva fraca", "#92D050"
    elif value < 10:
        return "Chuva moderada", "#FFCC00"
    elif value < 25:
        return "Chuva forte", "#FF9900"
    else:
        return "Chuva muito forte", "#FF0000"

# Criar uma fun√ß√£o simples para adicionar principais pontos de refer√™ncia de Campo Grande ao mapa
def add_campo_grande_landmarks(ax):
    """Adiciona pontos de refer√™ncia de Campo Grande ao mapa."""
    landmarks = {
        "Parque dos Poderes": [-20.4407, -54.5772],
        "Shopping Campo Grande": [-20.4622, -54.5890],
        "UFMS": [-20.5008, -54.6142],
        "Aeroporto": [-20.4687, -54.6725],
        "Parque das Na√ß√µes Ind√≠genas": [-20.4532, -54.5726],
        "Terminal Rodovi√°rio": [-20.4830, -54.6209],
        "Moren√£o": [-20.5114, -54.6150]
    }
    
    for name, (lat, lon) in landmarks.items():
        ax.plot(lon, lat, 'ko', markersize=4, transform=ccrs.PlateCarree())
        ax.text(lon+0.005, lat, name, transform=ccrs.PlateCarree(), fontsize=8, 
                horizontalalignment='left', verticalalignment='center')

# Fun√ß√£o para adicionar bairros de Campo Grande ao mapa
def add_campo_grande_neighborhoods(ax):
    """Adiciona regi√µes de Campo Grande ao mapa."""
    for region, (lat, lon) in campo_grande_areas.items():
        # Desenha c√≠rculo para representar a regi√£o
        ax.add_patch(plt.Circle((lon, lat), 0.01, color='blue', 
                              alpha=0.2, transform=ccrs.PlateCarree()))
        
        # Adiciona nome se n√£o for a regi√£o atualmente selecionada
        if region != area:
            ax.text(lon, lat, region, transform=ccrs.PlateCarree(), 
                   fontsize=7, ha='center', va='center')
        else:
            # Destaca a regi√£o selecionada
            ax.text(lon, lat, region, transform=ccrs.PlateCarree(), 
                   fontsize=8, ha='center', va='center', weight='bold', color='red')

# Fun√ß√£o principal para gerar an√°lise de precipita√ß√£o
def generate_precipitation_analysis():
    """Fun√ß√£o principal para baixar dados e gerar an√°lise de precipita√ß√£o."""
    # Selecionar o dataset adequado
    dataset = "reanalysis-era5-single-levels"
    
    # Format dates and times correctly for API
    start_date_str = start_date.strftime('%Y-%m-%d')
    end_date_str = end_date.strftime('%Y-%m-%d')
    
    # Create list of hours in the correct format
    hours = []
    current_hour = start_hour
    while True:
        hours.append(f"{current_hour:02d}:00")
        if current_hour == end_hour:
            break
        current_hour = (current_hour + 3) % 24
        if current_hour == start_hour:  # Evitar loop infinito
            break
    
    # Se n√£o tivermos horas definidas, usar padr√£o
    if not hours:
        hours = ['00:00', '06:00', '12:00', '18:00']
    
    # Definir √°rea geogr√°fica de interesse (cobrindo a √°rea urbana de Campo Grande)
    area = [
        lat_center + map_width/2,  # North
        lon_center - map_width/2,  # West
        lat_center - map_width/2,  # South
        lon_center + map_width/2   # East
    ]
    
    # Preparar request para API
    request = {
        'product_type': product_type,
        'variable': precip_var,
        'year': [d.strftime('%Y') for d in pd.date_range(start=start_date, end=end_date, freq='D')],
        'month': [d.strftime('%m') for d in pd.date_range(start=start_date, end=end_date, freq='D').unique('month')],
        'day': [d.strftime('%d') for d in pd.date_range(start=start_date, end=end_date, freq='D')],
        'time': hours,
        'area': area,
        'format': 'netcdf'
    }
    
    filename = f'precipitation_CampoGrande_{area}_{start_date}_to_{end_date}.nc'
    
    try:
        with st.spinner('üì• Baixando dados de precipita√ß√£o do CDS...'):
            client.retrieve(dataset, request, filename)
        
        # Abrir o dataset NetCDF
        ds = xr.open_dataset(filename)
        
        # Verificar vari√°veis dispon√≠veis
        variable_names = list(ds.data_vars)
        
        # Se a vari√°vel selecionada n√£o estiver dispon√≠vel, usar a primeira vari√°vel
        if precip_var not in variable_names:
            precip_var_actual = variable_names[0]
            st.warning(f"A vari√°vel {precip_var} n√£o est√° dispon√≠vel. Usando {precip_var_actual} como alternativa.")
        else:
            precip_var_actual = precip_var
        
        # Extrair s√©rie temporal para o ponto central (√°rea selecionada)
        with st.spinner(f"Extraindo dados de precipita√ß√£o para {area} em Campo Grande..."):
            df_timeseries = extract_point_timeseries(ds, lat_center, lon_center, var_name=precip_var_actual)
        
        if df_timeseries.empty:
            st.error("N√£o foi poss√≠vel extrair dados de precipita√ß√£o para este local.")
            return None
        
        # Calcular estat√≠sticas di√°rias
        df_timeseries['date'] = df_timeseries['time'].dt.date
        daily_precip = calculate_daily_precipitation(df_timeseries)
        
        # Gerar previs√£o para os pr√≥ximos dias (se necess√°rio)
        with st.spinner("Gerando previs√£o de precipita√ß√£o..."):
            df_forecast = predict_future_precipitation(df_timeseries, days=5)
        
        # --- Cria√ß√£o da anima√ß√£o ---
        # Identificar frames dispon√≠veis (passos de tempo)
        time_dim = 'time' if 'time' in ds.dims else 'forecast_time' if 'forecast_time' in ds.dims else None
        
        if not time_dim:
            st.error("N√£o foi poss√≠vel identificar dimens√£o temporal nos dados.")
            return None
        
        frames = len(ds[time_dim])
        
        if frames < 1:
            st.error("Erro: Dados insuficientes para anima√ß√£o.")
            return None
        
        # Determinar range de cores para precipita√ß√£o
        # Para precipita√ß√£o, valores t√≠picos: 0 a 25mm
        vmin = 0
        vmax = max(25, float(ds[precip_var_actual].max().values) * 1000)  # Converter m para mm
        
        # Criar figura para anima√ß√£o
        fig = plt.figure(figsize=(10, 8))
        ax = plt.subplot(1, 1, 1, projection=ccrs.PlateCarree())
        
        # Adicionar features b√°sicas
        ax.coastlines(resolution='10m')
        ax.add_feature(cfeature.BORDERS.with_scale('10m'), linestyle=':')
        ax.add_feature(cfeature.STATES.with_scale('10m'), linestyle=':')
        
        # Adicionar grid
        gl = ax.gridlines(draw_labels=True, linewidth=1, color='gray', alpha=0.5, linestyle='--')
        gl.top_labels = False
        gl.right_labels = False
        
        # Definir extens√£o do mapa
        ax.set_extent([lon_center - map_width/2, lon_center + map_width/2, 
                      lat_center - map_width/2, lat_center + map_width/2], 
                     crs=ccrs.PlateCarree())
        
        # Adicionar pontos de refer√™ncia e bairros de Campo Grande
        add_campo_grande_landmarks(ax)
        add_campo_grande_neighborhoods(ax)
        
        # Obter primeiro frame para inicializar
        first_frame_data = ds[precip_var_actual].isel({time_dim: 0}).values
        first_frame_time = pd.to_datetime(ds[time_dim].values[0])
        
        # Converter valores de m para mm se necess√°rio
        if precip_var_actual in ['total_precipitation', 'large_scale_precipitation', 'convective_precipitation']:
            first_frame_data = first_frame_data * 1000  # m para mm
        
        # Criar mapa de cores personalizado para precipita√ß√£o
        if colormap == "Blues":
            colors = [(1, 1, 1), (0.8, 0.8, 0.95), (0.4, 0.4, 0.8), (0.2, 0.2, 0.7), (0, 0, 0.6)]
            precip_cmap = LinearSegmentedColormap.from_list("precip_blues", colors)
        else:
            precip_cmap = plt.get_cmap(colormap)
        
        # Criar mapa de cores
        im = ax.pcolormesh(ds.longitude, ds.latitude, first_frame_data,
                          transform=ccrs.PlateCarree(),
                          cmap=precip_cmap, vmin=vmin, vmax=vmax)
        
        # Adicionar title com informa√ß√µes do primeiro frame
        title = ax.set_title(f"Precipita√ß√£o - {area}, Campo Grande - {first_frame_time.strftime('%d/%m/%Y %H:%M')}")
        
        # Adicionar barra de cores
        cbar = plt.colorbar(im, ax=ax, shrink=0.7, pad=0.05)
        cbar.set_label(precipitation_variables.get(precip_var_actual, "Precipita√ß√£o (mm)"))
        
        # Adicionar marcador para o ponto selecionado
        city_marker = ax.plot(lon_center, lat_center, 'ro', markersize=8, transform=ccrs.PlateCarree())[0]
        
        # Desenhar um c√≠rculo para destacar a √°rea urbana principal
        urban_area = plt.Circle((campo_grande_areas["Centro"][1], campo_grande_areas["Centro"][0]), 
                              0.03, color='red', fill=False, transform=ccrs.PlateCarree())
        ax.add_patch(urban_area)
            
        # Fun√ß√£o para atualizar frames da anima√ß√£o
        def update_frame(frame):
            # Atualizar dados
            frame_data = ds[precip_var_actual].isel({time_dim: frame}).values
            
            # Converter de m para mm se necess√°rio
            if precip_var_actual in ['total_precipitation', 'large_scale_precipitation', 'convective_precipitation']:
                frame_data = frame_data * 1000
                
            # Atualizar plot
            im.set_array(frame_data.ravel())
            
            # Atualizar t√≠tulo com timestamp
            frame_time = pd.to_datetime(ds[time_dim].values[frame])
            title.set_text(f"Precipita√ß√£o - {area}, Campo Grande - {frame_time.strftime('%d/%m/%Y %H:%M')}")
            
            return im, title
        
        # Criar anima√ß√£o
        anim = animation.FuncAnimation(fig, update_frame, frames=frames, 
                                      interval=animation_speed, blit=False)
        
        # Salvar anima√ß√£o como GIF (opcional)
        anim_file = f"precipitation_animation_CampoGrande_{area}.gif"
        anim.save(anim_file, writer='pillow', fps=2)
        
        return {
            'dataset': ds,
            'timeseries': df_timeseries,
            'daily': daily_precip,
            'forecast': df_forecast,
            'animation_file': anim_file,
            'figure': fig
        }
        
    except Exception as e:
        st.error(f"‚ùå Erro ao processar dados de precipita√ß√£o: {str(e)}")
        import traceback
        st.write(traceback.format_exc())
        return None

# Interface principal - abas para diferentes visualiza√ß√µes
tabs = st.tabs(["üìä An√°lise de Precipita√ß√£o", "üó∫Ô∏è Mapa de Precipita√ß√£o", "üìà S√©rie Temporal", "‚ÑπÔ∏è Sobre"])

with tabs[0]:
    st.header(f"An√°lise de Precipita√ß√£o para {area}, Campo Grande")
    
    # Bot√£o para iniciar an√°lise
    if st.button("üîÑ Gerar An√°lise de Precipita√ß√£o"):
        # Executar an√°lise de precipita√ß√£o
        results = generate_precipitation_analysis()
        
        if results:
            # Mostrar resumo de estat√≠sticas
            st.subheader("üìä Resumo da Precipita√ß√£o")
            
            # Layout de duas colunas
            col1, col2 = st.columns(2)
            
            with col1:
                # Tabela de precipita√ß√£o di√°ria
                st.markdown("### Precipita√ß√£o Di√°ria")
                daily = results['daily']
                
                if not daily.empty:
                    # Adicionar emojis e categorias
                    daily['emoji'] = daily['precipitation'].apply(get_precipitation_emoji)
                    daily['categoria'], daily['cor'] = zip(*daily['precipitation'].apply(categorize_precipitation))
                    
                    # Formata√ß√£o para exibi√ß√£o
                    display_df = daily.copy()
                    display_df['date'] = display_df['date'].apply(lambda x: x.strftime('%d/%m/%Y'))
                    display_df = display_df.rename(columns={
                        'date': 'Data',
                        'precipitation': 'Precipita√ß√£o (mm)',
                        'emoji': 'S√≠mbolo',
                        'categoria': 'Categoria'
                    })
                    
                    # Exibir dataframe formatado
                    st.dataframe(display_df[['Data', 'Precipita√ß√£o (mm)', 'S√≠mbolo', 'Categoria']], 
                                use_container_width=True)
                else:
                    st.warning("Sem dados di√°rios dispon√≠veis.")
            
            with col2:
                # Estat√≠sticas gerais
                stats = calculate_precipitation_stats(results['timeseries'])
                
                if stats:
                    st.markdown("### Estat√≠sticas")
                    
                    # M√©tricas em cards
                    col_a, col_b = st.columns(2)
                    col_a.metric("Precipita√ß√£o Total", f"{stats['total']:.1f} mm")
                    col_b.metric("Precipita√ß√£o M√°xima", f"{stats['max']:.1f} mm")
                    
                    col_c, col_d = st.columns(2)
                    col_c.metric("M√©dia Di√°ria", f"{stats['mean']:.1f} mm")
                    col_d.metric("Dias com Chuva", f"{stats['days_with_rain']}")
                    
                    # Interpreta√ß√£o
                    if stats['total'] == 0:
                        st.info("üìã Interpreta√ß√£o: Sem registro de chuvas no per√≠odo.")
                    elif stats['total'] < 5:
                        st.info("üìã Interpreta√ß√£o: Per√≠odo com chuvas fracas e isoladas.")
                    elif stats['total'] < 20:
                        st.info("üìã Interpreta√ß√£o: Per√≠odo com chuvas moderadas.")
                    else:
                        st.info("üìã Interpreta√ß√£o: Per√≠odo com chuvas significativas.")
            
            # Mostrar gr√°fico de previs√£o
            st.subheader("üìà Previs√£o de Precipita√ß√£o")
            
            forecast_df = results['forecast']
            if not forecast_df.empty:
                # Criar figura para o gr√°fico
                fig_forecast = plt.figure(figsize=(10, 6))
                ax = fig_forecast.add_subplot(111)
                
                # Separar dados hist√≥ricos e previs√£o
                hist_data = forecast_df[forecast_df['type'] == 'historical']
                pred_data = forecast_df[forecast_df['type'] == 'forecast']
                
                # Plotar dados hist√≥ricos
                ax.plot(hist_data['time'], hist_data['precipitation'], 
                       'o-', color='blue', label='Dados hist√≥ricos')
                
                # Plotar previs√£o
                ax.plot(pred_data['time'], pred_data['precipitation'], 
                       '--', color='red', label='Previs√£o')
                
                # Adicionar √°reas sombreadas para per√≠odos do dia
                days = pd.date_range(start=forecast_df['time'].min().date(), 
                                     end=forecast_df['time'].max().date() + timedelta(days=1), 
                                     freq='D')
                
                for day in days:
                    # Manh√£ (6-12h) - amarelo claro
                    morning_start = pd.Timestamp(day.year, day.month, day.day, 6)
                    morning_end = pd.Timestamp(day.year, day.month, day.day, 12)
                    ax.axvspan(morning_start, morning_end, alpha=0.1, color='yellow')
                    
                    # Tarde (12-18h) - laranja claro
                    afternoon_start = pd.Timestamp(day.year, day.month, day.day, 12)
                    afternoon_end = pd.Timestamp(day.year, day.month, day.day, 18)
                    ax.axvspan(afternoon_start, afternoon_end = pd.Timestamp(day.year, day.month, day.day, 18))
                    ax.axvspan(afternoon_start, afternoon_end, alpha=0.1, color='orange')
                    
                    # Noite (18-6h) - azul claro
                    night_start = pd.Timestamp(day.year, day.month, day.day, 18)
                    night_end = pd.Timestamp(day.year, day.month, day.day + 1, 6)
                    ax.axvspan(night_start, night_end, alpha=0.1, color='blue')
                
                # Formatar eixos
                ax.set_xlabel('Data e Hora')
                ax.set_ylabel('Precipita√ß√£o (mm)')
                ax.set_title('Previs√£o de Precipita√ß√£o para ' + area)
                ax.legend()
                
                # Formatar datas no eixo x
                ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %Hh'))
                ax.xaxis.set_major_locator(mdates.HourLocator(interval=6))
                fig_forecast.autofmt_xdate()
                
                st.pyplot(fig_forecast)
                
                # Explica√ß√£o da previs√£o
                st.markdown("""
                **Observa√ß√µes sobre a previs√£o:**
                - A previs√£o √© baseada em uma extrapola√ß√£o simples dos dados hist√≥ricos
                - √Åreas coloridas representam per√≠odos do dia (manh√£, tarde, noite)
                - A precis√£o diminui para per√≠odos mais distantes
                """)
            else:
                st.warning("N√£o foi poss√≠vel gerar previs√£o com os dados dispon√≠veis.")

with tabs[1]:
    st.header("üó∫Ô∏è Mapa de Precipita√ß√£o")
    
    if 'results' in locals():
        # Mostrar anima√ß√£o
        st.subheader("Anima√ß√£o da Precipita√ß√£o")
        
        # Exibir anima√ß√£o
        st.image(results['animation_file'], use_column_width=True)
        
        # Mostrar mapa est√°tico do √∫ltimo frame
        st.subheader("√öltima Atualiza√ß√£o")
        st.pyplot(results['figure'])
    else:
        st.info("Execute a an√°lise na aba 'üìä An√°lise de Precipita√ß√£o' para visualizar os mapas.")

with tabs[2]:
    st.header("üìà S√©rie Temporal de Precipita√ß√£o")
    
    if 'results' in locals():
        # Gr√°fico de s√©rie temporal
        fig_ts = plt.figure(figsize=(10, 6))
        ax = fig_ts.add_subplot(111)
        
        # Plotar dados
        ax.plot(results['timeseries']['time'], 
               results['timeseries']['precipitation'], 
               'b-', label='Precipita√ß√£o')
        
        # Adicionar m√©dia m√≥vel de 6h
        window_size = 2  # 2 pontos para m√©dia de 6h (considerando dados de 3 em 3h)
        if len(results['timeseries']) >= window_size:
            rolling_mean = results['timeseries']['precipitation'].rolling(window=window_size).mean()
            ax.plot(results['timeseries']['time'], rolling_mean, 
                   'r--', label=f'M√©dia m√≥vel {window_size*3}h')
        
        # Configurar gr√°fico
        ax.set_xlabel('Data e Hora')
        ax.set_ylabel('Precipita√ß√£o (mm)')
        ax.set_title(f'S√©rie Temporal de Precipita√ß√£o - {area}')
        ax.legend()
        
        # Formatar datas
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %Hh'))
        ax.xaxis.set_major_locator(mdates.HourLocator(interval=6))
        fig_ts.autofmt_xdate()
        
        st.pyplot(fig_ts)
        
        # Op√ß√£o para download dos dados
        st.download_button(
            label="üì• Baixar Dados de Precipita√ß√£o",
            data=results['timeseries'].to_csv(index=False).encode('utf-8'),
            file_name=f'precipitacao_{area}.csv',
            mime='text/csv'
        )
    else:
        st.info("Execute a an√°lise na aba 'üìä An√°lise de Precipita√ß√£o' para visualizar a s√©rie temporal.")

with tabs[3]:
    st.header("‚ÑπÔ∏è Sobre este Aplicativo")
    
    st.markdown("""
    ### Monitoramento de Precipita√ß√£o - Campo Grande/MS
    
    **Objetivo:**
    Este aplicativo fornece visualiza√ß√µes e an√°lises de dados de precipita√ß√£o para a √°rea urbana de Campo Grande, Mato Grosso do Sul.
    
    **Fonte dos Dados:**
    - Dados meteorol√≥gicos do ERA5 (Copernicus Climate Data Store)
    - Rean√°lise e previs√µes de precipita√ß√£o
    
    **Funcionalidades:**
    - Visualiza√ß√£o espacial da precipita√ß√£o
    - An√°lise temporal por regi√£o da cidade
    - Previs√£o simples baseada em tend√™ncias
    - Estat√≠sticas de precipita√ß√£o
    
    **Desenvolvido por:**
    [Teruo Yamada]
    
    **Contato:**
    [eng.teruoyamada@hotmail.com]
    
    **√öltima Atualiza√ß√£o:**
    {}
    """.format(datetime.now().strftime('%d/%m/%Y')))
    
    st.markdown("---")
    st.markdown("""
    **Aviso Legal:**
    As previs√µes apresentadas s√£o baseadas em modelos estat√≠sticos simplificados e n√£o substituem as previs√µes oficiais do √≥rg√£os meteorol√≥gicos.
    """)

# Rodap√©
st.markdown("---")
st.markdown("""
<small>Desenvolvido com Python, Streamlit, Cartopy e CDS API | Dados do Copernicus Climate Data Store</small>
""", unsafe_allow_html=True)

# Limpeza de arquivos tempor√°rios
if 'results' in locals():
    try:
        os.remove(results['animation_file'])
        os.remove(filename)
    except:
        pass

