import cdsapi
import xarray as xr
import numpy as np
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from matplotlib import animation
import streamlit as st
from datetime import datetime, timedelta
import os
import pandas as pd
import matplotlib.dates as mdates
from sklearn.linear_model import LinearRegression
from matplotlib.colors import LinearSegmentedColormap
import logging
import io
from matplotlib.animation import FuncAnimation

# Configura√ß√£o inicial
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√£o da p√°gina
st.set_page_config(layout="wide", page_title="Visualizador de AOD - MS")

# ‚úÖ Carregar autentica√ß√£o a partir do secrets.toml
try:
    ads_url = st.secrets["ads"]["url"]
    ads_key = st.secrets["ads"]["key"]
    client = cdsapi.Client(url=ads_url, key=ads_key)
except Exception as e:
    st.error("‚ùå Erro ao carregar as credenciais do CDS API. Verifique seu secrets.toml.")
    st.stop()

# --- CONSTANTES E CONFIGURA√á√ïES ---
CAMPOS_GRANDE_AREAS = {
    "Centro": [-20.4697, -54.6201],
    "Regi√£o Norte": [-20.4297, -54.6101],
    "Regi√£o Sul": [-20.5097, -54.6201],
    "Regi√£o Leste": [-20.4697, -54.5801],
    "Regi√£o Oeste": [-20.4697, -54.6601],
    "Regi√£o Centro-Norte": [-20.4397, -54.6301],
    "Regi√£o Centro-Sul": [-20.4997, -54.6301],
    "Regi√£o Nordeste": [-20.4397, -54.5901],
    "Regi√£o Noroeste": [-20.4397, -54.6501],
    "Regi√£o Sudeste": [-20.4997, -54.5901],
    "Regi√£o Sudoeste": [-20.4997, -54.6501]
}

PRECIPITATION_VARIABLES = {
    "total_precipitation": "Precipita√ß√£o Total (mm)",
    "large_scale_precipitation": "Precipita√ß√£o de Grande Escala (mm)",
    "convective_precipitation": "Precipita√ß√£o Convectiva (mm)"
}

COLORMAPS = ["Blues", "viridis", "plasma", "RdYlBu_r", "gist_earth"]

# --- FUN√á√ïES AUXILIARES ---
def setup_sidebar():
    """Configura a barra lateral com par√¢metros de entrada"""
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
    
    # Sele√ß√£o de regi√£o
    area = st.sidebar.selectbox("Selecione a regi√£o", list(CAMPOS_GRANDE_AREAS.keys()))
    lat_center, lon_center = CAMPOS_GRANDE_AREAS[area]
    
    # Per√≠odo de an√°lise
    st.sidebar.subheader("Per√≠odo de An√°lise")
    today = datetime.today()
    start_date = st.sidebar.date_input("Data In√≠cio", today)
    end_date = st.sidebar.date_input("Data Fim", today + timedelta(days=5))
    
    # Hor√°rios
    all_hours = [f"{h:02d}:00" for h in range(0, 24, 3)]
    start_hour = st.sidebar.selectbox("Hora Inicial", all_hours)
    end_hour = st.sidebar.selectbox("Hora Final", all_hours, index=len(all_hours)-1)
    
    # Vari√°vel de precipita√ß√£o
    precip_var = st.sidebar.selectbox(
        "Vari√°vel", 
        list(PRECIPITATION_VARIABLES.keys()),
        format_func=lambda x: PRECIPITATION_VARIABLES[x]
    )
    
    # Op√ß√µes avan√ßadas
    with st.sidebar.expander("Configura√ß√µes Avan√ßadas"):
        map_width = st.slider("Largura do Mapa (graus)", 0.1, 2.0, 0.3, 0.1)
        animation_speed = st.slider("Velocidade Anima√ß√£o (ms)", 200, 1000, 500)
        colormap = st.selectbox("Paleta de Cores", COLORMAPS)
        product_type = st.radio("Tipo de Produto", ["reanalysis", "ensemble_mean"])
    
    return {
        'area': area,
        'lat_center': lat_center,
        'lon_center': lon_center,
        'start_date': start_date,
        'end_date': end_date,
        'start_hour': int(start_hour.split(':')[0]),
        'end_hour': int(end_hour.split(':')[0]),
        'precip_var': precip_var,
        'map_width': map_width,
        'animation_speed': animation_speed,
        'colormap': colormap,
        'product_type': product_type
    }

# --- FUN√á√ïES PRINCIPAIS ---
def download_era5_data(params, client):
    """Baixa dados do ERA5 conforme par√¢metros"""
    try:
        filename = f"era5_data_{params['start_date']}_{params['end_date']}.nc"
        
        # Definindo √°rea com buffer para visualiza√ß√£o do mapa
        buffer = params['map_width'] * 2  # Buffer para mapa mais amplo
        
        request = {
            'product_type': params['product_type'],
            'variable': params['precip_var'],
            'year': [str(d.year) for d in pd.date_range(params['start_date'], params['end_date'])],
            'month': [str(d.month) for d in pd.date_range(params['start_date'], params['end_date'])],
            'day': [str(d.day) for d in pd.date_range(params['start_date'], params['end_date'])],
            'time': [f"{h:02d}:00" for h in range(params['start_hour'], params['end_hour']+1, 3)],
            'area': [
                params['lat_center'] + buffer,
                params['lon_center'] - buffer,
                params['lat_center'] - buffer,
                params['lon_center'] + buffer
            ],
            'format': 'netcdf'
        }
        
        with st.spinner("Baixando dados do ERA5..."):
            client.retrieve("reanalysis-era5-single-levels", request, filename)
        
        return xr.open_dataset(filename)
    
    except Exception as e:
        st.error(f"Erro ao baixar dados: {str(e)}")
        logger.exception("Erro no download de dados")
        return None

def process_precipitation_data(ds, params):
    """Processa os dados de precipita√ß√£o"""
    try:
        # Extrai s√©rie temporal para o ponto central
        def extract_point_data(ds, lat, lon):
            lat_idx = np.abs(ds.latitude - lat).argmin().item()
            lon_idx = np.abs(ds.longitude - lon).argmin().item()
            time_dim = next((dim for dim in ['time', 'forecast_time'] if dim in ds.dims), None)
            
            if not time_dim:
                return pd.DataFrame()
            
            data = ds[params['precip_var']].isel(
                latitude=lat_idx, 
                longitude=lon_idx
            ).to_dataframe().reset_index()
            
            # Converter m para mm se necess√°rio
            if params['precip_var'] in PRECIPITATION_VARIABLES:
                data[params['precip_var']] *= 1000
            
            return data.rename(columns={params['precip_var']: 'precipitation', time_dim: 'time'})
        
        df = extract_point_data(ds, params['lat_center'], params['lon_center'])
        
        if df.empty:
            return None
            
        # Calcula estat√≠sticas di√°rias
        df['date'] = df['time'].dt.date
        daily = df.groupby('date')['precipitation'].sum().reset_index()
        
        # Extrair s√©ries temporais para todas as regi√µes
        all_regions_data = {}
        for region, (lat, lon) in CAMPOS_GRANDE_AREAS.items():
            region_df = extract_point_data(ds, lat, lon)
            if not region_df.empty:
                all_regions_data[region] = region_df
        
        return {
            'dataset': ds,
            'timeseries': df,
            'daily': daily,
            'forecast': generate_forecast(df),
            'all_regions': all_regions_data
        }
    
    except Exception as e:
        st.error(f"Erro ao processar dados: {str(e)}")
        logger.exception("Erro no processamento")
        return None

def generate_forecast(df, days=3):
    """Gera previs√£o simples baseada em tend√™ncias"""
    if len(df) < 3:
        return pd.DataFrame()
    
    # Modelo de regress√£o
    df['time_numeric'] = (df['time'] - df['time'].min()).dt.total_seconds()
    model = LinearRegression().fit(df[['time_numeric']], df['precipitation'])
    
    # Gerar previs√£o
    last_time = df['time'].max()
    future_times = [last_time + timedelta(hours=6*i) for i in range(1, days*4+1)]
    future_seconds = [(t - df['time'].min()).total_seconds() for t in future_times]
    
    predictions = np.maximum(model.predict(np.array(future_seconds).reshape(-1, 1)), 0)
    
    # Adicionar sazonalidade di√°ria
    for i, t in enumerate(future_times):
        hour_factor = 1 + 0.5 * np.sin(np.pi * (t.hour - 6) / 12)
        predictions[i] *= hour_factor
    
    # Combinar dados
    forecast = pd.DataFrame({
        'time': future_times,
        'precipitation': predictions.flatten(),
        'type': 'forecast'
    })
    
    return pd.concat([
        df[['time', 'precipitation']].assign(type='historical'),
        forecast
    ], ignore_index=True)

def show_analysis_results(results, params):
    """Exibe os resultados da an√°lise"""
    # Estat√≠sticas resumidas
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Precipita√ß√£o Di√°ria")
        if not results['daily'].empty:
            daily = results['daily'].copy()
            daily['emoji'] = daily['precipitation'].apply(
                lambda x: "‚òÄÔ∏è" if x == 0 else 
                "üå¶Ô∏è" if x < 2.5 else 
                "üåßÔ∏è" if x < 10 else 
                "‚õàÔ∏è" if x < 25 else "üåä"
            )
            st.dataframe(daily, use_container_width=True)
    
    with col2:
        st.subheader("Estat√≠sticas")
        if not results['timeseries'].empty:
            total = results['timeseries']['precipitation'].sum()
            st.metric("Precipita√ß√£o Total", f"{total:.1f} mm")
            st.metric("M√°xima em 3h", f"{results['timeseries']['precipitation'].max():.1f} mm")
    
    # Previs√£o
    st.subheader("Previs√£o")
    if not results['forecast'].empty:
        fig, ax = plt.subplots(figsize=(10, 4))
        
        hist = results['forecast'][results['forecast']['type'] == 'historical']
        pred = results['forecast'][results['forecast']['type'] == 'forecast']
        
        ax.plot(hist['time'], hist['precipitation'], 'b-', label='Hist√≥rico')
        ax.plot(pred['time'], pred['precipitation'], 'r--', label='Previs√£o')
        
        ax.set_xlabel("Data")
        ax.set_ylabel("Precipita√ß√£o (mm)")
        ax.legend()
        st.pyplot(fig)

def create_precipitation_map(ds, timestep, params):
    """Cria mapa de precipita√ß√£o para um timestep espec√≠fico"""
    fig = plt.figure(figsize=(12, 8))
    
    # Definir proje√ß√£o e √°rea
    buffer = params['map_width'] * 2
    projection = ccrs.PlateCarree()
    ax = fig.add_subplot(1, 1, 1, projection=projection)
    
    # Adicionar caracter√≠sticas do mapa
    ax.add_feature(cfeature.COASTLINE)
    ax.add_feature(cfeature.BORDERS, linestyle=':')
    ax.add_feature(cfeature.STATES, alpha=0.3)
    
    # Limitar √°rea do mapa
    ax.set_extent([
        params['lon_center'] - buffer,
        params['lon_center'] + buffer,
        params['lat_center'] - buffer,
        params['lat_center'] + buffer
    ], crs=projection)
    
    # Extrair dados para o timestep
    selected_time = ds.time[timestep].values
    data = ds[params['precip_var']].isel(time=timestep) * 1000  # Convertendo para mm
    
    # Definir n√≠veis de precipita√ß√£o para o mapa de cores
    levels = [0, 0.1, 0.5, 1, 2.5, 5, 10, 15, 20, 30, 50, 75, 100]
    
    # Plotar dados
    contour = ax.contourf(
        ds.longitude, ds.latitude, data,
        levels=levels, 
        cmap=params['colormap'],
        transform=projection,
        extend='max'
    )
    
    # Adicionar marcadores para √°reas de Campo Grande
    for name, (lat, lon) in CAMPOS_GRANDE_AREAS.items():
        ax.plot(lon, lat, 'ro', markersize=4, transform=projection)
        ax.text(lon + 0.02, lat + 0.02, name, transform=projection, fontsize=8)
    
    # Adicionar barra de cores
    cbar = plt.colorbar(contour, ax=ax, orientation='horizontal', pad=0.05, shrink=0.8)
    cbar.set_label(PRECIPITATION_VARIABLES[params['precip_var']])
    
    # Adicionar t√≠tulo com informa√ß√£o do timestep
    time_str = pd.to_datetime(selected_time).strftime('%Y-%m-%d %H:%M')
    plt.title(f"Precipita√ß√£o em Campo Grande - {time_str}")
    
    # Adicionar grade
    gl = ax.gridlines(draw_labels=True, linewidth=0.5, alpha=0.5, linestyle='--')
    gl.top_labels = False
    gl.right_labels = False
    
    return fig

def create_map_animation(ds, params):
    """Cria anima√ß√£o dos mapas de precipita√ß√£o"""
    # Cria figura base
    fig = plt.figure(figsize=(12, 8))
    projection = ccrs.PlateCarree()
    ax = fig.add_subplot(1, 1, 1, projection=projection)
    
    # Buffer para √°rea do mapa
    buffer = params['map_width'] * 2
    
    # Configura√ß√µes b√°sicas do mapa
    ax.add_feature(cfeature.COASTLINE)
    ax.add_feature(cfeature.BORDERS, linestyle=':')
    ax.add_feature(cfeature.STATES, alpha=0.3)
    
    ax.set_extent([
        params['lon_center'] - buffer,
        params['lon_center'] + buffer,
        params['lat_center'] - buffer,
        params['lat_center'] + buffer
    ], crs=projection)
    
    # N√≠veis de precipita√ß√£o para o mapa de cores
    levels = [0, 0.1, 0.5, 1, 2.5, 5, 10, 15, 20, 30, 50, 75, 100]
    
    # Fun√ß√£o para atualizar o mapa para cada frame
    def update(frame):
        ax.clear()
        ax.add_feature(cfeature.COASTLINE)
        ax.add_feature(cfeature.BORDERS, linestyle=':')
        ax.add_feature(cfeature.STATES, alpha=0.3)
        
        ax.set_extent([
            params['lon_center'] - buffer,
            params['lon_center'] + buffer,
            params['lat_center'] - buffer,
            params['lat_center'] + buffer
        ], crs=projection)
        
        # Extrair dados para o frame atual
        data = ds[params['precip_var']].isel(time=frame) * 1000  # Convertendo para mm
        
        # Plotar precipita√ß√£o
        contour = ax.contourf(
            ds.longitude, ds.latitude, data,
            levels=levels, 
            cmap=params['colormap'],
            transform=projection,
            extend='max'
        )
        
        # Adicionar marcadores para √°reas de Campo Grande
        for name, (lat, lon) in CAMPOS_GRANDE_AREAS.items():
            ax.plot(lon, lat, 'ro', markersize=4, transform=projection)
            
        # Adicionar informa√ß√£o do timestamp
        time_str = pd.to_datetime(ds.time[frame].values).strftime('%Y-%m-%d %H:%M')
        ax.set_title(f"Precipita√ß√£o em Campo Grande - {time_str}")
        
        # Adicionar grade
        gl = ax.gridlines(draw_labels=True, linewidth=0.5, alpha=0.5, linestyle='--')
        gl.top_labels = False
        gl.right_labels = False
        
        return contour,
    
    # Criar anima√ß√£o
    ani = FuncAnimation(
        fig, update,
        frames=min(10, len(ds.time)),  # Limite para os primeiros 10 frames ou menos
        interval=params['animation_speed'],
        blit=False
    )
    
    # Adicionar barra de cores
    plt.colorbar(update(0)[0], ax=ax, orientation='horizontal', pad=0.05, shrink=0.8)
    
    return ani

def render_time_series(results, params):
    """Renderiza gr√°ficos de s√©rie temporal"""
    if not results or not results['timeseries'].any():
        st.warning("Dados insuficientes para renderizar s√©ries temporais.")
        return
    
    # Criar gr√°fico de s√©rie temporal principal
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # Destacar regi√£o selecionada
    timeseries = results['timeseries']
    ax.plot(
        timeseries['time'], 
        timeseries['precipitation'], 
        'b-', 
        linewidth=2,
        label=params['area']
    )
    
    # Adicionar outras regi√µes em segundo plano para compara√ß√£o (at√© 3)
    if 'all_regions' in results:
        other_regions = [r for r in results['all_regions'].keys() if r != params['area']][:3]
        for i, region in enumerate(other_regions):
            region_data = results['all_regions'][region]
            ax.plot(
                region_data['time'], 
                region_data['precipitation'], 
                alpha=0.5,
                linewidth=1,
                label=region
            )
    
    # Configurar formata√ß√£o de data no eixo x
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %H:%M'))
    plt.xticks(rotation=45)
    
    # Adicionar t√≠tulos e legendas
    ax.set_xlabel("Data/Hora")
    ax.set_ylabel(PRECIPITATION_VARIABLES[params['precip_var']])
    ax.set_title(f"S√©rie Temporal de Precipita√ß√£o - {params['area']}")
    ax.legend()
    
    # Adicionar grade
    ax.grid(True, alpha=0.3)
    
    # Adicionar total acumulado
    total = timeseries['precipitation'].sum()
    ax.text(
        0.02, 0.95, 
        f"Total acumulado: {total:.1f} mm",
        transform=ax.transAxes,
        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="gray", alpha=0.8)
    )
    
    fig.tight_layout()
    return fig

def render_comparison_chart(results):
    """Renderiza gr√°fico de compara√ß√£o entre regi√µes"""
    if not results or 'all_regions' not in results:
        return None
    
    # Calcular total acumulado por regi√£o
    region_totals = {}
    for region, data in results['all_regions'].items():
        region_totals[region] = data['precipitation'].sum()
    
    # Ordenar por total
    df = pd.DataFrame({
        'Regi√£o': region_totals.keys(),
        'Total (mm)': region_totals.values()
    }).sort_values('Total (mm)', ascending=False)
    
    # Criar gr√°fico de barras
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(df['Regi√£o'], df['Total (mm)'], color='steelblue')
    
    # Destacar regi√£o selecionada
    selected_idx = df[df['Regi√£o'] == results['timeseries'].name].index
    if not selected_idx.empty:
        bars[selected_idx[0]].set_color('firebrick')
    
    # Adicionar r√≥tulos
    for i, v in enumerate(df['Total (mm)']):
        ax.text(i, v + 0.1, f"{v:.1f}", ha='center', fontsize=8)
    
    # Configurar eixos e t√≠tulos
    plt.xticks(rotation=45, ha='right')
    plt.ylabel("Precipita√ß√£o Total (mm)")
    plt.title("Compara√ß√£o da Precipita√ß√£o Total por Regi√£o")
    plt.tight_layout()
    
    return fig

# --- INTERFACE DO USU√ÅRIO ---
def main():
    st.title("üåßÔ∏è Monitoramento de Precipita√ß√£o - Campo Grande")
    st.markdown("An√°lise de dados de precipita√ß√£o usando ERA5 do Copernicus Climate Data Store")
    
    # Inicializa√ß√£o - usando o cliente j√° inicializado no in√≠cio do script
    params = setup_sidebar()
    
    # Cache para dados
    if 'data' not in st.session_state:
        st.session_state['data'] = None
    if 'results' not in st.session_state:
        st.session_state['results'] = None
    
    # Bot√£o de atualiza√ß√£o principal
    col1, col2 = st.columns([3, 1])
    with col2:
        if st.button("üîÑ Atualizar Dados", type="primary", use_container_width=True):
            with st.spinner("Baixando e processando dados..."):
                ds = download_era5_data(params, client)
                
                if ds is not None:
                    st.session_state['data'] = ds
                    st.session_state['results'] = process_precipitation_data(ds, params)
                    st.success("Dados atualizados com sucesso!")
                    st.rerun()
    
    # Abas principais
    tab1, tab2, tab3, tab4 = st.tabs(["üìä An√°lise", "üó∫Ô∏è Mapa", "üìà S√©rie Temporal", "‚ÑπÔ∏è Sobre"])
    
    # Aba de An√°lise
    with tab1:
        st.header(f"An√°lise para {params['area']}")
        
        if st.session_state['results']:
            show_analysis_results(st.session_state['results'], params)
        else:
            st.info("Clique em 'Atualizar Dados' para carregar a an√°lise.")
    
    # Aba de Mapa
    with tab2:
        st.header("Mapa de Precipita√ß√£o")
        
        if st.session_state['data'] is not None:
            ds = st.session_state['data']
            
            # Seletor de timestamp
            timestamps = [pd.to_datetime(t.values).strftime("%Y-%m-%d %H:%M") 
                         for t in ds.time[:min(20, len(ds.time))]]
            
            selected_time = st.selectbox(
                "Selecione o hor√°rio para visualiza√ß√£o:", 
                range(len(timestamps)), 
                format_func=lambda i: timestamps[i]
            )
            
            col1, col2 = st.columns(2)
            with col1:
                # Toggle para anima√ß√£o
                show_animation = st.toggle("Mostrar anima√ß√£o", value=False)
            
            # Exibir mapa est√°tico ou anima√ß√£o
            with st.spinner("Renderizando mapa..."):
                if show_animation:
                    try:
                        st.warning("Anima√ß√£o pode levar alguns instantes para ser renderizada.")
                        animation = create_map_animation(ds, params)
                        
                        # Salvar anima√ß√£o em buffer e exibir como v√≠deo
                        ani_file = f"animation_{params['start_date']}_{params['area']}.gif"
                        animation.save(ani_file, writer='pillow', fps=2)
                        
                        st.image(ani_file, caption="Anima√ß√£o de Precipita√ß√£o", use_column_width=True)
                        
                    except Exception as e:
                        st.error(f"Erro ao criar anima√ß√£o: {str(e)}")
                        logger.exception("Erro na anima√ß√£o")
                else:
                    # Mapa est√°tico
                    fig = create_precipitation_map(ds, selected_time, params)
                    st.pyplot(fig)
        else:
            st.info("Clique em 'Atualizar Dados' para visualizar o mapa de precipita√ß√£o.")
    
    # Aba de S√©rie Temporal
    with tab3:
        st.header("S√©rie Temporal")
        
        if st.session_state['results']:
            results = st.session_state['results']
            
            # Renderizar s√©rie temporal
            fig_ts = render_time_series(results, params)
            st.pyplot(fig_ts)
            
            # Adicionar gr√°fico de compara√ß√£o entre regi√µes
            st.subheader("Compara√ß√£o entre Regi√µes")
            fig_comp = render_comparison_chart(results)
            if fig_comp:
                st.pyplot(fig_comp)
            
            # Exibir dados tabulares
            with st.expander("Dados Detalhados"):
                st.dataframe(results['timeseries'], use_container_width=True)
        else:
            st.info("Clique em 'Atualizar Dados' para visualizar a s√©rie temporal.")
    
    # Aba Sobre
    with tab4:
        st.header("Sobre o Aplicativo")
        st.markdown("""
        ### Monitoramento de Precipita√ß√£o - Campo Grande
        
        Este aplicativo utiliza dados do ERA5 do Copernicus Climate Data Store para monitorar e prever precipita√ß√£o
        em diferentes regi√µes de Campo Grande, MS.
        
        **Funcionalidades:**
        - Visualiza√ß√£o de dados hist√≥ricos de precipita√ß√£o
        - Previs√£o baseada em tend√™ncias recentes
        - Mapas de distribui√ß√£o espacial da precipita√ß√£o
        - An√°lise por regi√µes da cidade
        
        **Tecnologias utilizadas:**
        - Python
        - Streamlit
        - xarray para manipula√ß√£o de dados meteorol√≥gicos
        - Cartopy para visualiza√ß√£o geogr√°fica
        - Scikit-learn para modelagem preditiva simples
        
        **Como usar:**
        1. Selecione os par√¢metros desejados na barra lateral (regi√£o, per√≠odo, vari√°vel)
        2. Clique em "Atualizar Dados" para baixar e processar os dados
        3. Navegue pelas abas para visualizar diferentes tipos de an√°lise
        
        **Observa√ß√µes:**
        - Os dados do ERA5 t√™m resolu√ß√£o espacial limitada, o que pode afetar a precis√£o para √°reas urbanas
        - A previs√£o √© uma estimativa simples baseada em tend√™ncias recentes
        """)

if __name__ == "__main__":
    main()
