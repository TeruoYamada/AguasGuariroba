import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
import io
import base64
import os
import tempfile
from datetime import datetime, timedelta
from PIL import Image
import logging

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configura√ß√£o inicial do Streamlit
st.set_page_config(
    layout="wide",
    page_title="√Åguas Guariroba - Visualizador de Precipita√ß√£o - MS",
    page_icon="üåßÔ∏è"
)

# --- CONSTANTES E CONFIGURA√á√ïES ---
CAMPOS_GRANDE_AREAS = {
    "Centro": [-20.4697, -54.6201],
    "Regi√£o Norte": [-20.4297, -54.6101],
    "Regi√£o Sul": [-20.5097, -54.6201],
    "Regi√£o Leste": [-20.4697, -54.5801],
    "Regi√£o Oeste": [-20.4697, -54.6601],
    "Regi√£o Centro-Norte": [-20.4397, -54.6301],
    "Regi√£o Centro-Sul": [-20.4997, -54.6301],
    "Regi√£o Nordeste": [-20.4397, -54.5901],
    "Regi√£o Noroeste": [-20.4397, -54.6501],
    "Regi√£o Sudeste": [-20.4997, -54.5901],
    "Regi√£o Sudoeste": [-20.4997, -54.6501]
}

# Mapeamento de vari√°veis para nomes do ERA5
ERA5_VARIABLES = {
    "total_precipitation": "tp",
    "large_scale_precipitation": "lsp",
    "convective_precipitation": "cp"
}

PRECIPITATION_VARIABLES = {
    "total_precipitation": "Precipita√ß√£o Total (mm)",
    "large_scale_precipitation": "Precipita√ß√£o de Grande Escala (mm)",
    "convective_precipitation": "Precipita√ß√£o Convectiva (mm)"
}

COLORMAPS = ["Blues", "viridis", "plasma", "RdYlBu_r", "gist_earth"]

# Coordenadas aproximadas para o mapa de Campo Grande
CAMPO_GRANDE_BOUNDS = {
    'north': -20.35,
    'south': -20.60,
    'east': -54.50,
    'west': -54.75
}

# Definindo um diret√≥rio tempor√°rio para armazenar os arquivos baixados
TEMP_DIR = tempfile.gettempdir()


# --- FUN√á√ïES DE INTERFACE E ESTILIZA√á√ÉO ---
def create_gradient_background():
    """Aplica um gradiente de fundo √† aplica√ß√£o."""
    st.markdown(
        """
        <style>
        .stApp {
            background: linear-gradient(to bottom, #1e3c72, #2a5298);
            color: white;
        }
        .stSidebar {
            background-color: rgba(30, 60, 114, 0.8);
        }
        .css-1adrfps {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .st-bw {
            color: white;
        }
        .st-cx {
            background-color: rgba(255, 255, 255, 0.1);
        }
        header {
            background-color: transparent !important;
        }
        </style>
        """,
        unsafe_allow_html=True
    )


def add_logo():
    """Adiciona o logo ao topo da aplica√ß√£o."""
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("https://via.placeholder.com/400x100?text=√Åguas+Guariroba", use_column_width=True)


# --- FUN√á√ïES DE SIMULA√á√ÉO DE DADOS ---
def simulate_timeseries_data(start_date, end_date):
    """
    Simula dados de s√©rie temporal para precipita√ß√£o.
    
    Args:
        start_date: Data inicial da s√©rie.
        end_date: Data final da s√©rie.
    
    Returns:
        DataFrame com colunas 'time' e 'precipitation'.
    """
    try:
        start = pd.to_datetime(start_date)
        end = pd.to_datetime(end_date)
        times = pd.date_range(start=start, end=end, freq='3H')
        
        # Usar vectoriza√ß√£o numpy para melhor desempenho
        np.random.seed(42)  # Para reprodutibilidade
        
        # Horas do dia (0-23)
        hours = np.array([t.hour for t in times])
        
        # Fator baseado na hora do dia (mais chuva √† tarde)
        hour_factors = np.where(
            (hours >= 6) & (hours <= 18),
            0.5 + 0.5 * np.sin(np.pi * (hours - 6) / 12),
            0.2
        )
        
        # Fatores aleat√≥rios
        random_factors = np.random.exponential(1.0, size=len(times))
        
        # Eventos intensos aleat√≥rios
        intense_events = 5 * (np.random.rand(len(times)) < 0.05)
        
        # Calcular precipita√ß√£o
        precipitation = np.maximum(0, hour_factors * random_factors + intense_events)
        
        return pd.DataFrame({
            'time': times,
            'precipitation': precipitation
        })
    except Exception as e:
        logger.error(f"Erro ao simular dados de s√©rie temporal: {e}")
        return pd.DataFrame({'time': [], 'precipitation': []})


def simulate_daily_data(start_date, end_date):
    """
    Simula dados di√°rios de precipita√ß√£o.
    
    Args:
        start_date: Data inicial.
        end_date: Data final.
    
    Returns:
        DataFrame com colunas 'date' e 'precipitation'.
    """
    try:
        start = pd.to_datetime(start_date)
        end = pd.to_datetime(end_date)
        dates = pd.date_range(start=start, end=end, freq='D')
        
        np.random.seed(42)
        
        # Meses (1-12)
        months = np.array([d.month for d in dates])
        
        # Fator sazonal (mais chuva no ver√£o do hemisf√©rio sul)
        season_factors = np.where(
            (months >= 11) | (months <= 3),
            1.5,
            0.7
        )
        
        # Fatores aleat√≥rios
        random_factors = np.random.exponential(1.0, size=len(dates))
        
        # Calcular precipita√ß√£o
        precipitation = np.maximum(0, season_factors * random_factors * 5)
        
        return pd.DataFrame({
            'date': dates,
            'precipitation': precipitation
        })
    except Exception as e:
        logger.error(f"Erro ao simular dados di√°rios: {e}")
        return pd.DataFrame({'date': [], 'precipitation': []})


def simulate_forecast_data(end_date, forecast_days):
    """
    Simula dados de previs√£o de precipita√ß√£o.
    
    Args:
        end_date: Data final dos dados hist√≥ricos.
        forecast_days: N√∫mero de dias para previs√£o.
    
    Returns:
        DataFrame com colunas 'date' e 'precipitation'.
    """
    try:
        last_date = pd.to_datetime(end_date)
        dates = pd.date_range(start=last_date + timedelta(days=1), periods=forecast_days)
        
        np.random.seed(43)  # Diferente da s√©rie hist√≥rica
        
        # Meses (1-12)
        months = np.array([d.month for d in dates])
        
        # Dias desde o in√≠cio da previs√£o
        days_from_start = np.array([(d - dates[0]).days for d in dates])
        
        # Fator sazonal (mais chuva no ver√£o do hemisf√©rio sul)
        season_factors = np.where(
            (months >= 11) | (months <= 3),
            1.5,
            0.7
        )
        
        # Fator de dia (tend√™ncia decrescente ao longo do tempo)
        day_factors = np.maximum(0.1, 1 - days_from_start / forecast_days)
        
        # Fatores aleat√≥rios
        random_factors = np.random.exponential(0.8, size=len(dates))
        
        # Calcular precipita√ß√£o
        precipitation = np.maximum(0, season_factors * day_factors * random_factors * 5)
        
        return pd.DataFrame({
            'date': dates,
            'precipitation': precipitation
        })
    except Exception as e:
        logger.error(f"Erro ao simular dados de previs√£o: {e}")
        return pd.DataFrame({'date': [], 'precipitation': []})


def simulate_ml_forecast(regions, end_date, forecast_days):
    """
    Simula previs√µes de ML para cada regi√£o.
    
    Args:
        regions: Lista de nomes de regi√µes.
        end_date: Data final dos dados hist√≥ricos.
        forecast_days: N√∫mero de dias para previs√£o.
    
    Returns:
        Dicion√°rio com DataFrames de previs√£o por regi√£o.
    """
    try:
        ml_forecasts = {}
        
        for region in regions:
            last_date = pd.to_datetime(end_date)
            dates = pd.date_range(start=last_date + timedelta(days=1), periods=forecast_days)
            
            # Usar hash do nome da regi√£o para seed
            region_seed = hash(region) % 100
            np.random.seed(region_seed)
            
            # Fator regional (norte mais chuvoso que sul)
            region_factor = 1.2 if "Norte" in region else 0.8 if "Sul" in region else 1.0
            
            # Meses (1-12)
            months = np.array([d.month for d in dates])
            
            # Fator sazonal (mais chuva no ver√£o do hemisf√©rio sul)
            season_factors = np.where(
                (months >= 11) | (months <= 3),
                1.5,
                0.7
            )
            
            # Fatores aleat√≥rios
            random_factors = np.random.exponential(0.8, size=len(dates))
            
            # Calcular precipita√ß√£o
            precipitation = np.maximum(0, region_factor * season_factors * random_factors * 5)
            
            ml_forecasts[region] = pd.DataFrame({
                'date': dates,
                'precipitation': precipitation,
                'region': region
            })
        
        return ml_forecasts
    except Exception as e:
        logger.error(f"Erro ao simular previs√µes ML: {e}")
        return {}


def generate_era5_data(params):
    """
    Gera dados simulados para substituir os dados do ERA5.
    
    Args:
        params: Dicion√°rio com par√¢metros de configura√ß√£o.
    
    Returns:
        Dicion√°rio com dados simulados.
    """
    try:
        st.warning("‚ö†Ô∏è Usando dados simulados para demonstra√ß√£o")
        
        # Usando processamento paralelo para acelerar a gera√ß√£o de dados
        results = {}
        
        # Simula s√©rie temporal para a √°rea selecionada
        results['timeseries'] = simulate_timeseries_data(
            params['start_date'], 
            params['end_date']
        )
        
        # Simula dados di√°rios
        results['daily'] = simulate_daily_data(
            params['start_date'], 
            params['end_date']
        )
        
        # Simula dados de previs√£o
        results['forecast'] = simulate_forecast_data(
            params['end_date'], 
            params['forecast_days']
        )
        
        # Simula dados para todas as regi√µes
        results['all_regions'] = {
            region: simulate_timeseries_data(params['start_date'], params['end_date'])
            for region in CAMPOS_GRANDE_AREAS.keys()
        }
        
        # Simula previs√µes ML
        results['ml_forecast'] = simulate_ml_forecast(
            list(CAMPOS_GRANDE_AREAS.keys()), 
            params['end_date'],
            params['forecast_days']
        )
        
        return results
        
    except Exception as e:
        logger.exception(f"Erro ao gerar dados simulados: {e}")
        st.error(f"Erro ao gerar dados simulados: {str(e)}")
        return None


def try_import_optional_modules():
    """
    Tenta importar m√≥dulos opcionais e retorna status.
    
    Returns:
        Dicion√°rio com status de importa√ß√£o dos m√≥dulos.
    """
    modules = {}
    
    # Lista de m√≥dulos para verificar
    module_list = [
        ('cdsapi', 'cdsapi'),
        ('xarray', 'xarray'),
        ('geopandas', 'geopandas'),
        ('cartopy.crs', 'cartopy'),
        ('sklearn.linear_model', 'sklearn')
    ]
    
    for module_name, key in module_list:
        try:
            __import__(module_name)
            modules[key] = True
        except ImportError:
            modules[key] = False
    
    return modules


# Fun√ß√£o para criar um mapa simplificado quando o Cartopy n√£o est√° dispon√≠vel
def create_simple_map(data, title):
    """
    Cria um mapa simplificado sem o Cartopy.
    
    Args:
        data: Dados para visualiza√ß√£o.
        title: T√≠tulo do mapa.
    
    Returns:
        Figura do matplotlib.
    """
    try:
        fig, ax = plt.subplots(figsize=(10, 8))
        
        # Criar um gr√°fico de calor simples
        x = np.linspace(-54.75, -54.50, 20)
        y = np.linspace(-20.60, -20.35, 20)
        X, Y = np.meshgrid(x, y)
        
        # Gerar dados aleat√≥rios mais consistentes com o t√≠tulo
        np.random.seed(hash(title) % 100)  # Seed baseado no t√≠tulo
        Z = np.random.rand(20, 20) * 10
        
        # Suavizar dados para mapas mais realistas
        from scipy.ndimage import gaussian_filter
        Z = gaussian_filter(Z, sigma=1.0)
        
        # Criar o mapa de calor
        c = ax.pcolormesh(X, Y, Z, cmap='Blues', alpha=0.7)
        
        # Adicionar pontos representando as regi√µes
        for region, (lat, lon) in CAMPOS_GRANDE_AREAS.items():
            ax.plot(lon, lat, 'ro', markersize=4)
            ax.text(lon + 0.01, lat + 0.01, region, fontsize=8, 
                   fontweight='bold', color='black', 
                   path_effects=[plt.patheffects.withStroke(linewidth=2, foreground='white')])
        
        # Formatar o gr√°fico
        ax.set_xlabel('Longitude')
        ax.set_ylabel('Latitude')
        ax.set_title(title)
        
        # Adicionar colorbar
        cbar = plt.colorbar(c, ax=ax)
        cbar.set_label('Precipita√ß√£o (mm)')
        
        # Melhorar o visual
        ax.set_facecolor('#f0f0f0')
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        return fig
    except Exception as e:
        logger.error(f"Erro ao criar mapa simplificado: {e}")
        fig, ax = plt.subplots(figsize=(10, 8))
        ax.text(0.5, 0.5, f"Erro ao criar mapa: {str(e)}", 
                ha='center', va='center', fontsize=12)
        return fig


# Fun√ß√£o principal da aplica√ß√£o
def main():
    """Fun√ß√£o principal que executa a aplica√ß√£o Streamlit."""
    try:
        # Verificar m√≥dulos dispon√≠veis
        modules = try_import_optional_modules()
        
        # Aplicando estiliza√ß√£o
        create_gradient_background()
        
        # Cabe√ßalho
        add_logo()
        st.title("üìä Visualizador de Precipita√ß√£o - Campo Grande, MS")
        st.markdown("### Sistema de Monitoramento e Previs√£o de Chuvas")
        
        # Sidebar para configura√ß√µes
        with st.sidebar:
            st.header("‚öôÔ∏è Configura√ß√µes")
            
            # Abas para organizar as configura√ß√µes
            config_tab1, config_tab2, config_tab3 = st.tabs(["üìç Local", "üìÖ Per√≠odo", "üîß Avan√ßado"])
            
            with config_tab1:
                # Sele√ß√£o de regi√£o
                area = st.selectbox(
                    "Selecione a regi√£o",
                    list(CAMPOS_GRANDE_AREAS.keys()),
                    index=0
                )
                lat_center, lon_center = CAMPOS_GRANDE_AREAS.get(area, (-20.4697, -54.6201))
                
                # Visualiza√ß√£o do mapa
                map_width = st.slider("√Årea de Visualiza√ß√£o (graus)", 0.1, 2.0, 0.3, 0.1)
                show_shapefile = st.checkbox("Mostrar √Årea Urbana", value=True)
                satellite_background = st.checkbox("Usar Imagem de Sat√©lite", value=True)
            
            with config_tab2:
                # Per√≠odo de an√°lise
                st.subheader("Per√≠odo de An√°lise")
                today = datetime.today()
                col1, col2 = st.columns(2)
                with col1:
                    start_date = st.date_input("In√≠cio", today - timedelta(days=7))
                with col2:
                    end_date = st.date_input("Fim", today + timedelta(days=5))
                
                # Hor√°rios
                st.subheader("Hor√°rios")
                all_hours = [f"{h:02d}:00" for h in range(0, 24, 3)]
                col1, col2 = st.columns(2)
                with col1:
                    start_hour = st.selectbox("Hora Inicial", all_hours)
                with col2:
                    end_hour = st.selectbox("Hora Final", all_hours, index=len(all_hours)-1)

                # Vari√°vel de precipita√ß√£o
                precip_var = st.selectbox(
                    "Vari√°vel de Precipita√ß√£o", 
                    list(PRECIPITATION_VARIABLES.keys()),
                    format_func=lambda x: PRECIPITATION_VARIABLES[x]
                )
                
                # Horizonte de previs√£o
                forecast_days = st.slider("Horizonte de Previs√£o (dias)", 1, 14, 7)
                
            with config_tab3:
                # Configura√ß√µes avan√ßadas
                st.subheader("Configura√ß√µes Avan√ßadas")
                
                animation_speed = st.slider("Velocidade Anima√ß√£o (ms)", 200, 1000, 500)
                colormap = st.selectbox("Paleta de Cores", COLORMAPS)
                
                product_type = st.radio("Tipo de Produto", ["reanalysis", "ensemble_mean"])
                
                # Verificar se o sklearn est√° dispon√≠vel para mostrar op√ß√µes de modelo
                if modules['sklearn']:
                    ml_model = st.selectbox("Modelo de Previs√£o", 
                                          ["RandomForest", "GradientBoosting", "LinearRegression"])
                else:
                    ml_model = "LinearRegression"  # Valor padr√£o
                    st.warning("Scikit-learn n√£o est√° instalado. Usando modelo padr√£o.")
                
                probability_threshold = st.slider("Limiar de Probabilidade (%)", 0, 100, 30)
        
        # Bot√£o para atualizar dados
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            update_button = st.button("üîÑ Atualizar Dados", use_container_width=True)
        
        # Verificar m√≥dulos necess√°rios e mostrar avisos
        missing_modules = [k for k, v in modules.items() if not v]
        if missing_modules:
            st.warning(f"‚ö†Ô∏è Os seguintes m√≥dulos n√£o est√£o instalados: {', '.join(missing_modules)}. Alguns recursos podem n√£o funcionar.")
        
        # Organizar a exibi√ß√£o dos dados em abas
        tab1, tab2, tab3, tab4 = st.tabs(["üìà S√©rie Temporal", "üó∫Ô∏è Mapas", "üîÆ Previs√µes", "üìä An√°lise Regional"])
        
        # Preparar par√¢metros para processamento
        params = {
            'area': area,
            'lat_center': lat_center,
            'lon_center': lon_center,
            'start_date': start_date,
            'end_date': end_date,
            'start_hour': int(start_hour.split(':')[0]),
            'end_hour': int(end_hour.split(':')[0]),
            'precip_var': precip_var,
            'map_width': map_width,
            'animation_speed': animation_speed,
            'colormap': colormap,
            'product_type': product_type,
            'forecast_days': forecast_days,
            'ml_model': ml_model,
            'probability_threshold': probability_threshold,
            'show_shapefile': show_shapefile,
            'satellite_background': satellite_background
        }
        
        # Simular dados para demonstra√ß√£o
        if 'data' not in st.session_state or update_button:
            with st.spinner("‚åõ Carregando dados..."):
                # Para demonstra√ß√£o, usar dados simulados
                st.session_state.data = generate_era5_data(params)
        
        data = st.session_state.data
        
        # Tab 1: S√©rie Temporal
        with tab1:
            st.header(f"S√©rie Temporal de Precipita√ß√£o - {area}")
            
            if data and 'timeseries' in data and not data['timeseries'].empty:
                # Gr√°fico de s√©rie temporal
                fig, ax = plt.subplots(figsize=(12, 6))
                ax.bar(data['timeseries']['time'], data['timeseries']['precipitation'],
                    width=0.02, alpha=0.7, color='#1e88e5', label='Precipita√ß√£o a cada 3h')
                
                # Formatar eixos
                ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %H:%M'))
                plt.xticks(rotation=45)
                ax.set_ylabel('Precipita√ß√£o (mm)', fontsize=12)
                ax.set_title(f'Precipita√ß√£o em {area} - {start_date.strftime("%d/%m/%Y")} a {end_date.strftime("%d/%m/%Y")}', 
                            fontsize=14)
                ax.grid(True, alpha=0.3)
                plt.tight_layout()
                
                st.pyplot(fig)
                
                # Estat√≠sticas di√°rias
                st.subheader("Estat√≠sticas Di√°rias")
                
                if 'daily' in data and not data['daily'].empty:
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("Precipita√ß√£o Total", f"{data['daily']['precipitation'].sum():.1f} mm")
                    with col2:
                        st.metric("Precipita√ß√£o M√©dia Di√°ria", f"{data['daily']['precipitation'].mean():.1f} mm/dia")
                    with col3:
                        st.metric("Dias com Chuva", f"{(data['daily']['precipitation'] > 0.1).sum()} dias")
                    
                    # Tabela de dados di√°rios
                    st.subheader("Dados Di√°rios")
                    display_df = data['daily'].copy()
                    
                    # Converter datas para string no formato brasileiro
                    if 'date' in display_df.columns:
                        if pd.api.types.is_datetime64_any_dtype(display_df['date']):
                            display_df['date'] = display_df['date'].dt.strftime('%d/%m/%Y')
                    
                    display_df.columns = ['Data', 'Precipita√ß√£o (mm)']
                    st.dataframe(display_df, use_container_width=True)
                else:
                    st.warning("Dados di√°rios n√£o est√£o dispon√≠veis.")
            else:
                st.warning("Dados de s√©rie temporal n√£o est√£o dispon√≠veis.")
        
        # Tab 2: Mapas
        with tab2:
            st.header("Visualiza√ß√£o Espacial da Precipita√ß√£o")
            
            if data and 'timeseries' in data and not data['timeseries'].empty:
                # Seletor de tempo para o mapa
                timestamps = data['timeseries']['time'].tolist()
                selected_time = st.select_slider(
                    "Selecione um Momento:",
                    options=timestamps,
                    format_func=lambda x: x.strftime('%d/%m/%Y %H:%M')
                )
                
                # Criar duas colunas para os mapas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("Mapa de Precipita√ß√£o")
                    
                    if modules['cartopy']:
                        # Aqui normalmente chamar√≠amos create_precip_map
                        st.image("https://via.placeholder.com/800x600?text=Mapa+de+Precipita√ß√£o", use_column_width=True)
                    else:
                        # Usar mapa simplificado
                        fig = create_simple_map(data, f"Precipita√ß√£o em {selected_time.strftime('%d/%m/%Y %H:%M')}")
                        st.pyplot(fig)
                    
                with col2:
                    st.subheader("Probabilidade de Chuva")
                    
                    if modules['cartopy']:
                        # Aqui normalmente chamar√≠amos create_probability_map
                        st.image("https://via.placeholder.com/800x600?text=Mapa+de+Probabilidade", use_column_width=True)
                    else:
                        # Usar mapa simplificado
                        fig = create_simple_map(data, "Probabilidade de Precipita√ß√£o")
                        st.pyplot(fig)
                
                # Anima√ß√£o
                st.subheader("Anima√ß√£o da Precipita√ß√£o")
                animation_placeholder = st.empty()
                animation_placeholder.image("https://via.placeholder.com/800x600?text=Anima√ß√£o+(GIF)", use_column_width=True)
                
                # Op√ß√£o para download da anima√ß√£o
                st.download_button(
                    label="‚¨áÔ∏è Download da Anima√ß√£o",
                    data=io.BytesIO(b"Placeholder para o GIF real"),
                    file_name="precipitacao_animacao.gif",
                    mime="image/gif"
                )
            else:
                st.warning("Dados para mapas n√£o est√£o dispon√≠veis.")
        
        # Tab 3: Previs√µes
        with tab3:
            st.header("Previs√£o de Precipita√ß√£o")
            
            # Escolha do m√©todo de previs√£o
            forecast_method = st.radio(
                "M√©todo de Previs√£o:",
                ["Modelo Linear", "Machine Learning", "M√©dia dos M√©todos"],
                horizontal=True
            )
            
            if data and 'daily' in data and not data['daily'].empty and 'forecast' in data and not data['forecast'].empty:
                # Gr√°fico de previs√£o
                fig, ax = plt.subplots(figsize=(12, 6))
                
                # Dados hist√≥ricos
                historical_dates = data['daily']['date'].tolist()
                historical_precip = data['daily']['precipitation'].tolist()
                ax.bar(historical_dates, historical_precip, width=0.6, alpha=0.7, color='#1e88e5', label='Hist√≥rico')
                
                # Dados de previs√£o
                forecast_dates = data['forecast']['date'].tolist()
                forecast_precip = data['forecast']['precipitation'].tolist()
                ax.bar(forecast_dates, forecast_precip, width=0.6, alpha=0.7, color='#ff9800', label='Previs√£o')
                
                # Formatar eixos
                ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m'))
                plt.xticks(rotation=45)
                ax.set_ylabel('Precipita√ß√£o (mm/dia)', fontsize=12)
                ax.set_title(f'Previs√£o de Precipita√ß√£o para {area} - Pr√≥ximos {forecast_days} dias', fontsize=14)
                ax.grid(True, alpha=0.3)
                ax.legend()
                plt.tight_layout()
                
                st.pyplot(fig)
                
                # Detalhes da previs√£o
                st.subheader("Detalhes da Previs√£o")
                
                # Estat√≠sticas de previs√£o
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Precipita√ß√£o Total Prevista", f"{data['forecast']['precipitation'].sum():.1f} mm")
                with col2:
                    st.metric("Precipita√ß√£o M√°xima Di√°ria", f"{data['forecast']['precipitation'].max():.1f} mm")
                with col3:
                    st.metric("Dias com Chuva Previstos", f"{(data['forecast']['precipitation'] > 0.1).sum()} dias")
                
                # Tabela de previs√£o
                st.subheader("Tabela de Previs√£o")
                display_forecast = data['forecast'].copy()
                
                # Converter datas para string no formato brasileiro
                if 'date' in display_forecast.columns:
                    if pd.api.types.is_datetime64_any_dtype(display_forecast['date']):
                        display_forecast['date'] = display_forecast['date'].dt.strftime('%d/%m/%Y')
                
                display_forecast.columns = ['Data', 'Precipita√ß√£o Prevista (mm)']
                st.dataframe(display_forecast, use_container_width=True)
                
                # Alertas de chuva
                st.subheader("‚ö†Ô∏è Alertas de Precipita√ß√£o")
                
                # Condi√ß√£o de chuva forte
                heavy_rain_days = data['forecast'][data['forecast']['precipitation'] > 10]
                if not heavy_rain_days.empty:
                    st.warning(f"Possibilidade de chuva forte nos dias: {', '.join(heavy_rain_days['date'].dt.strftime('%d/%m/%Y').tolist())}")
                else:
                    st.success("N√£o h√° previs√£o de chuvas fortes para o per√≠odo selecionado.")
                
            else:
                st.warning("Dados de previs√£o n√£o est√£o dispon√≠veis.")
        
        # Tab 4: An√°lise Regional
        with tab4:
            st.header("An√°lise Regional de Precipita√ß√£o")
            
            if data and 'all_regions' in data and data['all_regions']:
                # Sele√ß√£o de regi√µes para compara√ß√£o
                all_regions = list(CAMPOS_GRANDE_AREAS.keys())
                selected_regions = st.multiselect(
                    "Selecione regi√µes para comparar:",
                    all_regions,
                    default=all_regions[:3]
                )
                
                if selected_regions:
                    # Gr√°fico de compara√ß√£o regional
                    fig, ax = plt.subplots(figsize=(12, 6))
                    
                    for region in selected_regions:
                        if region in data['all_regions']:
                            region_data = data['all_regions'][region]
                            # Calcular m√©dia di√°ria para simplificar a visualiza√ß√£o
                            region_data['date'] = pd.to_datetime(region_data['time']).dt.date
                            daily_avg = region_data.groupby('date')['precipitation'].mean().reset_index()
                            
                            # Converter para datetime para usar no gr√°fico
                            daily_avg['date'] = pd.to_datetime(daily_avg['date'])
                            
                            ax.plot(daily_avg['date'], daily_avg['precipitation'], 
                                  marker='o', markersize=3, linewidth=2, label=region)
                    
                    # Formatar eixos
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m'))
                    plt.xticks(rotation=45)
                    ax.set_ylabel('Precipita√ß√£o M√©dia (mm/dia)', fontsize=12)
                    ax.set_title('Compara√ß√£o de Precipita√ß√£o por Regi√£o', fontsize=14)
                    ax.grid(True, alpha=0.3)
                    ax.legend()
                    plt.tight_layout()
                    
                    st.pyplot(fig)
                    
                    # Mapa de calor por regi√£o
                    st.subheader("Mapa de Calor por Regi√£o")
                    
                    # Preparar dados para o mapa de calor
                    heat_data = []
                    for region in all_regions:
                        if region in data['all_regions']:
                            region_data = data['all_regions'][region]
                            region_data['date'] = pd.to_datetime(region_data['time']).dt.date
                            daily_total = region_data.groupby('date')['precipitation'].sum().reset_index()
                            
                            for _, row in daily_total.iterrows():
                                heat_data.append({
                                    'region': region,
                                    'date': row['date'],
                                    'precipitation': row['precipitation']
                                })
                    
                    if heat_data:
                        heat_df = pd.DataFrame(heat_data)
                        
                        # Criar pivot table para o mapa de calor
                        pivot_table = heat_df.pivot_table(
                            values='precipitation', 
                            index='region', 
                            columns='date', 
                            aggfunc='sum'
                        )
                        
                        # Plotar mapa de calor
                        fig, ax = plt.subplots(figsize=(14, 8))
                        c = ax.pcolormesh(pivot_table.columns, pivot_table.index, pivot_table.values, 
                                       cmap=colormap, alpha=0.8)
                        
                        # Formatar eixos
                        ax.set_yticks(np.arange(0.5, len(pivot_table.index), 1), pivot_table.index)
                        ax.set_xticks(pivot_table.columns[::2])  # Mostrar apenas datas alternadas
                        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m'))
                        plt.xticks(rotation=45)
                        
                        # Adicionar barra de cores
                        cbar = plt.colorbar(c, ax=ax)
                        cbar.set_label('Precipita√ß√£o Total (mm)', fontsize=12)
                        
                        ax.set_title('Distribui√ß√£o de Precipita√ß√£o por Regi√£o', fontsize=14)
                        plt.tight_layout()
                        
                        st.pyplot(fig)
                    else:
                        st.warning("Dados insuficientes para o mapa de calor.")
                    
                    # Alertas regionais
                    st.subheader("‚ö†Ô∏è Alertas Regionais")
                    
                    # Identificar regi√µes com precipita√ß√£o acima da m√©dia
                    if 'ml_forecast' in data and data['ml_forecast']:
                        high_precip_regions = []
                        threshold = 15  # Limiar para alerta (mm)
                        
                        for region, forecast_data in data['ml_forecast'].items():
                            total_precip = forecast_data['precipitation'].sum()
                            if total_precip > threshold:
                                high_precip_regions.append((region, total_precip))
                        
                        if high_precip_regions:
                            high_precip_regions.sort(key=lambda x: x[1], reverse=True)
                            
                            st.warning("Regi√µes com previs√£o de alta precipita√ß√£o para os pr√≥ximos dias:")
                            
                            for region, precip in high_precip_regions:
                                st.markdown(f"- **{region}**: {precip:.1f} mm")
                        else:
                            st.success("N√£o h√° previs√£o de precipita√ß√£o alta para nenhuma regi√£o.")
                    else:
                        st.warning("Dados de previs√£o regional n√£o est√£o dispon√≠veis.")
                else:
                    st.warning("Selecione pelo menos uma regi√£o para compara√ß√£o.")
            else:
                st.warning("Dados regionais n√£o est√£o dispon√≠veis.")
        
        # Rodap√© da aplica√ß√£o
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("### üìù Exportar Relat√≥rio")
            export_format = st.selectbox("Formato:", ["PDF", "Excel", "CSV"])
            
            st.download_button(
                label="‚¨áÔ∏è Exportar Dados",
                data=io.BytesIO(b"Simula√ß√£o de exporta√ß√£o de dados"),
                file_name=f"precipitacao_{area}_{start_date}_{end_date}.{export_format.lower()}",
                mime="application/octet-stream"
            )
        
        with col2:
            st.markdown("### üìä Estat√≠sticas Gerais")
            if data and 'daily' in data and not data['daily'].empty:
                # Calcular estat√≠sticas adicionais
                percentile_90 = np.percentile(data['daily']['precipitation'], 90)
                
                st.markdown(f"""
                - **M√©dia Mensal Hist√≥rica**: 150 mm
                - **Percentil 90%**: {percentile_90:.1f} mm
                - **Dias Sem Chuva**: {(data['daily']['precipitation'] < 0.1).sum()} dias
                - **Dias com Precipita√ß√£o Alta**: {(data['daily']['precipitation'] > 20).sum()} dias
                """)
            else:
                st.warning("Estat√≠sticas n√£o dispon√≠veis.")
        
        with col3:
            st.markdown("### ‚öôÔ∏è Sobre o Sistema")
            st.markdown("""
            **√Åguas Guariroba - Sistema de Monitoramento e Previs√£o**
            
            Vers√£o: 1.0.0 (Demonstra√ß√£o)
            
            Dados baseados em simula√ß√£o para demonstra√ß√£o.
            """)
        
        # Avisos finais
        st.markdown("---")
        st.markdown("""
        **Observa√ß√µes**: Este √© um sistema de demonstra√ß√£o. Em um ambiente de produ√ß√£o, os dados seriam obtidos de fontes oficiais
        como INMET, CEMADEN, ou diretamente do ERA5 via API CDS.
        """)
        
    except Exception as e:
        st.error(f"Erro na aplica√ß√£o: {str(e)}")
        logger.exception("Erro na aplica√ß√£o")


# Executar a aplica√ß√£o
if __name__ == "__main__":
    main()
